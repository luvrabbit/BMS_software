
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000003f4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aea6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020fc  00000000  00000000  0002af81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a00  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000793  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021a7f  00000000  00000000  0002e213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d94a  00000000  00000000  0004fc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c612b  00000000  00000000  0005d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d5c  00000000  00000000  00123708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00126464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004164 	.word	0x08004164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004164 	.word	0x08004164

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b4f      	ldr	r3, [pc, #316]	; (800061c <MX_GPIO_Init+0x158>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a4e      	ldr	r2, [pc, #312]	; (800061c <MX_GPIO_Init+0x158>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b4c      	ldr	r3, [pc, #304]	; (800061c <MX_GPIO_Init+0x158>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b48      	ldr	r3, [pc, #288]	; (800061c <MX_GPIO_Init+0x158>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a47      	ldr	r2, [pc, #284]	; (800061c <MX_GPIO_Init+0x158>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <MX_GPIO_Init+0x158>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b41      	ldr	r3, [pc, #260]	; (800061c <MX_GPIO_Init+0x158>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a40      	ldr	r2, [pc, #256]	; (800061c <MX_GPIO_Init+0x158>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b3e      	ldr	r3, [pc, #248]	; (800061c <MX_GPIO_Init+0x158>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_GPIO_Init+0x158>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a39      	ldr	r2, [pc, #228]	; (800061c <MX_GPIO_Init+0x158>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <MX_GPIO_Init+0x158>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <MX_GPIO_Init+0x158>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a32      	ldr	r2, [pc, #200]	; (800061c <MX_GPIO_Init+0x158>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <MX_GPIO_Init+0x158>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2130      	movs	r1, #48	; 0x30
 800056a:	482d      	ldr	r0, [pc, #180]	; (8000620 <MX_GPIO_Init+0x15c>)
 800056c:	f001 f928 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	482b      	ldr	r0, [pc, #172]	; (8000624 <MX_GPIO_Init+0x160>)
 8000578:	f001 f922 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4829      	ldr	r0, [pc, #164]	; (8000628 <MX_GPIO_Init+0x164>)
 8000584:	f001 f91c 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000588:	2310      	movs	r3, #16
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <MX_GPIO_Init+0x15c>)
 80005a0:	f000 ff72 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 80005a4:	2320      	movs	r3, #32
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <MX_GPIO_Init+0x15c>)
 80005bc:	f000 ff64 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <MX_GPIO_Init+0x164>)
 80005d4:	f000 ff58 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_MODE_Pin;
 80005d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PLC_MODE_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_GPIO_Init+0x160>)
 80005f2:	f000 ff49 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80005f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_GPIO_Init+0x164>)
 8000610:	f000 ff3a 	bl	8001488 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fd14 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f830 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff44 	bl	80004c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063c:	f000 faa6 	bl	8000b8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 face 	bl	8000be0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000644:	f000 f8d4 	bl	80007f0 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    USART_RX_TX(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fc33 	bl	8000eb4 <USART_RX_TX>
    USART_RX_TX(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 fc30 	bl	8000eb4 <USART_RX_TX>
    delay_us(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f889 	bl	800076c <delay_us>
    times++;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x5c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <main+0x5c>)
 8000662:	6013      	str	r3, [r2, #0]
    if ((times % 500000) == 0) {
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <main+0x5c>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <main+0x60>)
 800066a:	fba3 1302 	umull	r1, r3, r3, r2
 800066e:	0c5b      	lsrs	r3, r3, #17
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <main+0x64>)
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <main+0x1c>
      HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800067c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <main+0x68>)
 8000682:	f001 f8b6 	bl	80017f2 <HAL_GPIO_TogglePin>
    USART_RX_TX(1);
 8000686:	e7df      	b.n	8000648 <main+0x1c>
 8000688:	20000084 	.word	0x20000084
 800068c:	431bde83 	.word	0x431bde83
 8000690:	0007a120 	.word	0x0007a120
 8000694:	40020400 	.word	0x40020400

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 faa8 	bl	8003bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f883 	bl	8001828 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f85c 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fae4 	bl	8001d18 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f845 	bl	80007e4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t nus) {
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t ticks;
  uint32_t told, tnow, tcnt = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <delay_us+0x74>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	617b      	str	r3, [r7, #20]
  ticks = nus * MAIN_FREQ;                 /* 需要的节拍数 */
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	22a8      	movs	r2, #168	; 0xa8
 8000782:	fb02 f303 	mul.w	r3, r2, r3
 8000786:	613b      	str	r3, [r7, #16]
  told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <delay_us+0x74>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	61fb      	str	r3, [r7, #28]
  while (1) {
    tnow = SysTick->VAL;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <delay_us+0x74>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	60fb      	str	r3, [r7, #12]
    if (tnow != told) {
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	429a      	cmp	r2, r3
 800079a:	d0f8      	beq.n	800078e <delay_us+0x22>
      if (tnow < told) {
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d206      	bcs.n	80007b2 <delay_us+0x46>
        tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 80007a4:	69fa      	ldr	r2, [r7, #28]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	4413      	add	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	e007      	b.n	80007c2 <delay_us+0x56>
      }
      else {
        tcnt += reload - tnow + told;
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1ad2      	subs	r2, r2, r3
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	4413      	add	r3, r2
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	4413      	add	r3, r2
 80007c0:	61bb      	str	r3, [r7, #24]
      }
      told = tnow;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	61fb      	str	r3, [r7, #28]
      if (tcnt >= ticks) {
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d200      	bcs.n	80007d0 <delay_us+0x64>
    tnow = SysTick->VAL;
 80007ce:	e7de      	b.n	800078e <delay_us+0x22>
        break;                      /* 时间超过/等于要延迟的时间,则退出 */
 80007d0:	bf00      	nop
      }
    }
  }
}
 80007d2:	bf00      	nop
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_SPI1_Init+0x7c>)
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <MX_SPI1_Init+0x80>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_SPI1_Init+0x7c>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_SPI1_Init+0x7c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_SPI1_Init+0x7c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI1_Init+0x7c>)
 8000810:	2202      	movs	r2, #2
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_SPI1_Init+0x7c>)
 8000816:	2201      	movs	r2, #1
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI1_Init+0x7c>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI1_Init+0x7c>)
 8000824:	2238      	movs	r2, #56	; 0x38
 8000826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_SPI1_Init+0x7c>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI1_Init+0x7c>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_SPI1_Init+0x7c>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI1_Init+0x7c>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <MX_SPI1_Init+0x7c>)
 8000842:	f001 fc89 	bl	8002158 <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800084c:	f7ff ffca 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI1_Init+0x7c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_SPI1_Init+0x7c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800085e:	601a      	str	r2, [r3, #0]
  spi1_read_write_byte(0xff);
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	f000 f84f 	bl	8000904 <spi1_read_write_byte>
  /* USER CODE END SPI1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000088 	.word	0x20000088
 8000870:	40013000 	.word	0x40013000

08000874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_SPI_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12b      	bne.n	80008ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_SPI_MspInit+0x88>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ce:	23e0      	movs	r3, #224	; 0xe0
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_SPI_MspInit+0x8c>)
 80008ea:	f000 fdcd 	bl	8001488 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <spi1_read_write_byte>:
/*
  @brief  SPI1 read write one byte data
  @param  txdata: data to be sent
  @ret    data received
*/
uint8_t spi1_read_write_byte(uint8_t txdata) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;
  HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 1000);
 800090e:	f107 020f 	add.w	r2, r7, #15
 8000912:	1df9      	adds	r1, r7, #7
 8000914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <spi1_read_write_byte+0x28>)
 800091e:	f001 fca4 	bl	800226a <HAL_SPI_TransmitReceive>
  return rxdata;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000088 	.word	0x20000088

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800096e:	2005      	movs	r0, #5
 8000970:	f000 fcb6 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 fb98 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <USART1_IRQHandler+0x10>)
 80009da:	f001 ffc3 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000284 	.word	0x20000284

080009e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USART3_IRQHandler+0x10>)
 80009ee:	f001 ffb9 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002c8 	.word	0x200002c8

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
  }

  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f889 	bl	8000b68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
  }
  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a96:	605a      	str	r2, [r3, #4]
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f003 f8c6 	bl	8003c98 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20020000 	.word	0x20020000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	200000e0 	.word	0x200000e0
 8000b40:	20000460 	.word	0x20000460

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b70:	1d39      	adds	r1, r7, #4
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	2201      	movs	r2, #1
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <__io_putchar+0x20>)
 8000b7a:	f001 fe30 	bl	80027de <HAL_UART_Transmit>
 return ch;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002c8 	.word	0x200002c8

08000b8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART1_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f001 fdbe 	bl	8002744 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f7ff fe09 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000284 	.word	0x20000284
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <MX_USART3_UART_Init+0x58>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c18:	f001 fd94 	bl	8002744 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f7ff fddf 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)g_usart3_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000c26:	2201      	movs	r2, #1
 8000c28:	4904      	ldr	r1, [pc, #16]	; (8000c3c <MX_USART3_UART_Init+0x5c>)
 8000c2a:	4802      	ldr	r0, [pc, #8]	; (8000c34 <MX_USART3_UART_Init+0x54>)
 8000c2c:	f001 fe69 	bl	8002902 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200002c8 	.word	0x200002c8
 8000c38:	40004800 	.word	0x40004800
 8000c3c:	200001b0 	.word	0x200001b0

08000c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <HAL_UART_MspInit+0x10c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d135      	bne.n	8000cce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a39      	ldr	r2, [pc, #228]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a32      	ldr	r2, [pc, #200]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <HAL_UART_MspInit+0x114>)
 8000cb8:	f000 fbe6 	bl	8001488 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 3);
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 fb18 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 fb31 	bl	800132e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ccc:	e039      	b.n	8000d42 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_UART_MspInit+0x118>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d134      	bne.n	8000d42 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_UART_MspInit+0x110>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d22:	2307      	movs	r3, #7
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HAL_UART_MspInit+0x11c>)
 8000d2e:	f000 fbab 	bl	8001488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 2);
 8000d32:	2202      	movs	r2, #2
 8000d34:	2102      	movs	r1, #2
 8000d36:	2027      	movs	r0, #39	; 0x27
 8000d38:	f000 fadd 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d3c:	2027      	movs	r0, #39	; 0x27
 8000d3e:	f000 faf6 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	40020c00 	.word	0x40020c00

08000d60 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {                                  // USART3(PC)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <HAL_UART_RxCpltCallback+0x130>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d145      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x9e>
		if ((g_usart3_rx_sta & 0x8000) == 0) {                          // 接收未完�? 
 8000d72:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db3a      	blt.n	8000df2 <HAL_UART_RxCpltCallback+0x92>
			if (!(g_usart3_rx_sta & 0x4000)) {                            // 未接收到0x0D（回�?)
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d123      	bne.n	8000dd0 <HAL_UART_RxCpltCallback+0x70>
				if (g_usart3_hal_rx_buffer[0] == 0x0d) {                     // 接收�?0x0D
 8000d88:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_UART_RxCpltCallback+0x138>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b0d      	cmp	r3, #13
 8000d8e:	d107      	bne.n	8000da0 <HAL_UART_RxCpltCallback+0x40>
					g_usart3_rx_sta |= 0x4000;                                // 回车标志�? �?1
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000d9c:	801a      	strh	r2, [r3, #0]
 8000d9e:	e028      	b.n	8000df2 <HAL_UART_RxCpltCallback+0x92>
				} else {
          g_usart3_rx_buf[USART3_END] = g_usart3_hal_rx_buffer[0];  // 将接收到的字符放入rx_buf�?
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000da8:	4a3b      	ldr	r2, [pc, #236]	; (8000e98 <HAL_UART_RxCpltCallback+0x138>)
 8000daa:	7811      	ldrb	r1, [r2, #0]
 8000dac:	4a3b      	ldr	r2, [pc, #236]	; (8000e9c <HAL_UART_RxCpltCallback+0x13c>)
 8000dae:	54d1      	strb	r1, [r2, r3]
          g_usart3_rx_sta += 1;
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000dba:	801a      	strh	r2, [r3, #0]
          if (USART3_END > USART_RX_LEN - 1) {
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dc4:	2bc7      	cmp	r3, #199	; 0xc7
 8000dc6:	dd14      	ble.n	8000df2 <HAL_UART_RxCpltCallback+0x92>
            g_usart3_rx_sta = 0;                                    // 接收数据大于200，重新接�?
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
 8000dce:	e010      	b.n	8000df2 <HAL_UART_RxCpltCallback+0x92>
          }
				}
			} else {
        if (g_usart3_hal_rx_buffer[0] == 0x0a) {
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_UART_RxCpltCallback+0x138>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b0a      	cmp	r3, #10
 8000dd6:	d109      	bne.n	8000dec <HAL_UART_RxCpltCallback+0x8c>
          g_usart3_rx_sta |= 0x8000;                                // 接收完成
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000de8:	801a      	strh	r2, [r3, #0]
 8000dea:	e002      	b.n	8000df2 <HAL_UART_RxCpltCallback+0x92>
        } else {
          g_usart3_rx_sta = 0;                                      // 接收错误，重新接�?
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_UART_RxCpltCallback+0x134>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	801a      	strh	r2, [r3, #0]
        }
      }
		}
    HAL_UART_Receive_IT(&huart3, (uint8_t *)g_usart3_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000df2:	2201      	movs	r2, #1
 8000df4:	4928      	ldr	r1, [pc, #160]	; (8000e98 <HAL_UART_RxCpltCallback+0x138>)
 8000df6:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <HAL_UART_RxCpltCallback+0x140>)
 8000df8:	f001 fd83 	bl	8002902 <HAL_UART_Receive_IT>
        }
      }
		}
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_usart1_hal_rx_buffer, USART_RX_BUFFER_SIZE);
  }
}
 8000dfc:	e044      	b.n	8000e88 <HAL_UART_RxCpltCallback+0x128>
    if ((g_usart1_rx_sta & 0x8000) == 0) {                          // 接收未完�? 
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db3a      	blt.n	8000e7e <HAL_UART_RxCpltCallback+0x11e>
			if (!(g_usart1_rx_sta & 0x4000)) {                            // 未接收到0x0D（回�?)
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d123      	bne.n	8000e5c <HAL_UART_RxCpltCallback+0xfc>
				if (g_usart1_hal_rx_buffer[0] == 0x0d) {                     // 接收�?0x0D
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_UART_RxCpltCallback+0x148>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b0d      	cmp	r3, #13
 8000e1a:	d107      	bne.n	8000e2c <HAL_UART_RxCpltCallback+0xcc>
					g_usart1_rx_sta |= 0x4000;                                // 回车标志�? �?1
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e028      	b.n	8000e7e <HAL_UART_RxCpltCallback+0x11e>
          g_usart1_rx_buf[USART1_END] = g_usart1_hal_rx_buffer[0];  // 将接收到的字符放入rx_buf�?
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_UART_RxCpltCallback+0x148>)
 8000e36:	7811      	ldrb	r1, [r2, #0]
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <HAL_UART_RxCpltCallback+0x14c>)
 8000e3a:	54d1      	strb	r1, [r2, r3]
          g_usart1_rx_sta += 1;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e46:	801a      	strh	r2, [r3, #0]
          if (USART1_END > USART_RX_LEN - 1) {
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e50:	2bc7      	cmp	r3, #199	; 0xc7
 8000e52:	dd14      	ble.n	8000e7e <HAL_UART_RxCpltCallback+0x11e>
            g_usart1_rx_sta = 0;                                    // 接收数据大于200，重新接�?
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	e010      	b.n	8000e7e <HAL_UART_RxCpltCallback+0x11e>
        if (g_usart1_hal_rx_buffer[0] == 0x0a) {
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_UART_RxCpltCallback+0x148>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	d109      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x118>
          g_usart1_rx_sta |= 0x8000;                                // 接收完成
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	e002      	b.n	8000e7e <HAL_UART_RxCpltCallback+0x11e>
          g_usart1_rx_sta = 0;                                      // 接收错误，重新接�?
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_UART_RxCpltCallback+0x144>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_usart1_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <HAL_UART_RxCpltCallback+0x148>)
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_UART_RxCpltCallback+0x150>)
 8000e84:	f001 fd3d 	bl	8002902 <HAL_UART_Receive_IT>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004800 	.word	0x40004800
 8000e94:	200001ac 	.word	0x200001ac
 8000e98:	200001b0 	.word	0x200001b0
 8000e9c:	200000e4 	.word	0x200000e4
 8000ea0:	200002c8 	.word	0x200002c8
 8000ea4:	2000027c 	.word	0x2000027c
 8000ea8:	20000280 	.word	0x20000280
 8000eac:	200001b4 	.word	0x200001b4
 8000eb0:	20000284 	.word	0x20000284

08000eb4 <USART_RX_TX>:

void USART_RX_TX(uint8_t id) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if (id == 1) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <USART_RX_TX+0x16>
    USART1_RX_USART3_TX();
 8000ec4:	f000 f80a 	bl	8000edc <USART1_RX_USART3_TX>
  } else if (id == 3) {
    USART3_RX_USART1_TX();
  }
}
 8000ec8:	e004      	b.n	8000ed4 <USART_RX_TX+0x20>
  } else if (id == 3) {
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d101      	bne.n	8000ed4 <USART_RX_TX+0x20>
    USART3_RX_USART1_TX();
 8000ed0:	f000 f83a 	bl	8000f48 <USART3_RX_USART1_TX>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <USART1_RX_USART3_TX>:

void USART1_RX_USART3_TX() { // USART1(PLC) reveive info and send to USART3(PC)
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  if (g_usart1_rx_sta & 0x8000) { // USART1 receive PLC info
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <USART1_RX_USART3_TX+0x54>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da1d      	bge.n	8000f28 <USART1_RX_USART3_TX+0x4c>
    uint32_t len;
    len = g_usart1_rx_sta & 0x3fff;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <USART1_RX_USART3_TX+0x54>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ef4:	607b      	str	r3, [r7, #4]
    // send message to USART3(PC)
    printf("\r\nPLC message:\r\n");
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <USART1_RX_USART3_TX+0x58>)
 8000ef8:	f002 fda0 	bl	8003a3c <puts>
    HAL_UART_Transmit(&huart3, (uint8_t*)g_usart1_rx_buf, len, 1000);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <USART1_RX_USART3_TX+0x5c>)
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <USART1_RX_USART3_TX+0x60>)
 8000f08:	f001 fc69 	bl	80027de <HAL_UART_Transmit>
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != SET);
 8000f0c:	bf00      	nop
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <USART1_RX_USART3_TX+0x64>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f18:	2b40      	cmp	r3, #64	; 0x40
 8000f1a:	d1f8      	bne.n	8000f0e <USART1_RX_USART3_TX+0x32>
    printf("\r\n\r\n");
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <USART1_RX_USART3_TX+0x68>)
 8000f1e:	f002 fd8d 	bl	8003a3c <puts>
    g_usart1_rx_sta = 0;
 8000f22:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <USART1_RX_USART3_TX+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	801a      	strh	r2, [r3, #0]
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000027c 	.word	0x2000027c
 8000f34:	0800417c 	.word	0x0800417c
 8000f38:	200001b4 	.word	0x200001b4
 8000f3c:	200002c8 	.word	0x200002c8
 8000f40:	20000284 	.word	0x20000284
 8000f44:	0800418c 	.word	0x0800418c

08000f48 <USART3_RX_USART1_TX>:

void USART3_RX_USART1_TX() { // USART3(PC) reveive info and send to USART1(PLC)
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  if (g_usart3_rx_sta & 0x8000) { // USART3 receive PC info
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <USART3_RX_USART1_TX+0x70>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da2a      	bge.n	8000fae <USART3_RX_USART1_TX+0x66>
    uint32_t len;
    len = g_usart3_rx_sta & 0x3fff;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <USART3_RX_USART1_TX+0x70>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f60:	607b      	str	r3, [r7, #4]
    if (g_usart3_rx_buf[0] == 0x01) { // first Byte is 1, send PC message to PLC
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <USART3_RX_USART1_TX+0x74>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d112      	bne.n	8000f90 <USART3_RX_USART1_TX+0x48>
      // send message to USART1(PLC)
      HAL_UART_Transmit(&huart1, (uint8_t*)(&g_usart3_rx_buf[1]), len - 1, 1000);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	4912      	ldr	r1, [pc, #72]	; (8000fc0 <USART3_RX_USART1_TX+0x78>)
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <USART3_RX_USART1_TX+0x7c>)
 8000f7a:	f001 fc30 	bl	80027de <HAL_UART_Transmit>
      while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != SET);
 8000f7e:	bf00      	nop
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <USART3_RX_USART1_TX+0x7c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	2b40      	cmp	r3, #64	; 0x40
 8000f8c:	d1f8      	bne.n	8000f80 <USART3_RX_USART1_TX+0x38>
 8000f8e:	e00b      	b.n	8000fa8 <USART3_RX_USART1_TX+0x60>
    } else if (g_usart3_rx_buf[0] == 0x00) { // first Byte is 0, change PLC mode
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <USART3_RX_USART1_TX+0x74>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <USART3_RX_USART1_TX+0x60>
      plc_change_mode(g_usart3_rx_buf[1]);
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <USART3_RX_USART1_TX+0x74>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f83f 	bl	8001020 <plc_change_mode>
      printf("\r\n\r\n");
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <USART3_RX_USART1_TX+0x80>)
 8000fa4:	f002 fd4a 	bl	8003a3c <puts>
    }
    g_usart3_rx_sta = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <USART3_RX_USART1_TX+0x70>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001ac 	.word	0x200001ac
 8000fbc:	200000e4 	.word	0x200000e4
 8000fc0:	200000e5 	.word	0x200000e5
 8000fc4:	20000284 	.word	0x20000284
 8000fc8:	0800418c 	.word	0x0800418c

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe8:	4c0b      	ldr	r4, [pc, #44]	; (8001018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff6:	f7ff fda5 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f002 fe53 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fb15 	bl	800062c <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001010:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 8001014:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001018:	2000045c 	.word	0x2000045c

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <plc_change_mode>:
#include "plc.h"

void plc_change_mode(uint8_t mode) { // mode => 1: send; 0: receive
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  switch (mode)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <plc_change_mode+0x22>
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10c      	bne.n	800104e <plc_change_mode+0x2e>
  {
  case 1:
    HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <plc_change_mode+0x38>)
 800103c:	f000 fbc0 	bl	80017c0 <HAL_GPIO_WritePin>
    break;
 8001040:	e006      	b.n	8001050 <plc_change_mode+0x30>
  case 0:
    HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <plc_change_mode+0x38>)
 800104a:	f000 fbb9 	bl	80017c0 <HAL_GPIO_WritePin>
  default:
    break;
 800104e:	bf00      	nop
  }
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f92b 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fc4e 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f943 	bl	800134a <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f90b 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	2000030c 	.word	0x2000030c

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	2000030c 	.word	0x2000030c

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff feda 	bl	8001128 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d008      	beq.n	8001394 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e052      	b.n	800143a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0216 	bic.w	r2, r2, #22
 80013a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <HAL_DMA_Abort+0x62>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0208 	bic.w	r2, r2, #8
 80013d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e4:	e013      	b.n	800140e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e6:	f7ff fe9f 	bl	8001128 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d90c      	bls.n	800140e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e015      	b.n	800143a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e4      	bne.n	80013e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	223f      	movs	r2, #63	; 0x3f
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d004      	beq.n	8001460 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e00c      	b.n	800147a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2205      	movs	r2, #5
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	e16b      	b.n	800177c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 815a 	bne.w	8001776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d005      	beq.n	80014da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d130      	bne.n	800153c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 0201 	and.w	r2, r3, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b03      	cmp	r3, #3
 8001546:	d017      	beq.n	8001578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d123      	bne.n	80015cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	69b9      	ldr	r1, [r7, #24]
 80015c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80b4 	beq.w	8001776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <HAL_GPIO_Init+0x310>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x314>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x226>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <HAL_GPIO_Init+0x318>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x222>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_GPIO_Init+0x31c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x21e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x320>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x21a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x324>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x328>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x212>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x330>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x20a>
 800168e:	2307      	movs	r3, #7
 8001690:	e00e      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001692:	2308      	movs	r3, #8
 8001694:	e00c      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001696:	2306      	movs	r3, #6
 8001698:	e00a      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169a:	2305      	movs	r3, #5
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169e:	2304      	movs	r3, #4
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016ae:	2300      	movs	r3, #0
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c0:	4935      	ldr	r1, [pc, #212]	; (8001798 <HAL_GPIO_Init+0x310>)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_GPIO_Init+0x334>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_GPIO_Init+0x334>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	f67f ae90 	bls.w	80014a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40013800 	.word	0x40013800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40021400 	.word	0x40021400
 80017b4:	40021800 	.word	0x40021800
 80017b8:	40021c00 	.word	0x40021c00
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	041a      	lsls	r2, r3, #16
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43d9      	mvns	r1, r3
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	400b      	ands	r3, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e267      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d075      	beq.n	8001932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001846:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b04      	cmp	r3, #4
 8001850:	d00c      	beq.n	800186c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185a:	2b08      	cmp	r3, #8
 800185c:	d112      	bne.n	8001884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800186a:	d10b      	bne.n	8001884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05b      	beq.n	8001930 <HAL_RCC_OscConfig+0x108>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d157      	bne.n	8001930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e242      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188c:	d106      	bne.n	800189c <HAL_RCC_OscConfig+0x74>
 800188e:	4b76      	ldr	r3, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a75      	ldr	r2, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xb0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x98>
 80018a6:	4b70      	ldr	r3, [pc, #448]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6f      	ldr	r2, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6d      	ldr	r3, [pc, #436]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6c      	ldr	r2, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xb0>
 80018c0:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a68      	ldr	r2, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc22 	bl	8001128 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc1e 	bl	8001128 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e207      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xc0>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fc0e 	bl	8001128 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc0a 	bl	8001128 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1f3      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0xe8>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x152>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1c7      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_RCC_OscConfig+0x244>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fbc3 	bl	8001128 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fbbf 	bl	8001128 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a8      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4925      	ldr	r1, [pc, #148]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x244>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fba2 	bl	8001128 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb9e 	bl	8001128 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e187      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d036      	beq.n	8001a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d016      	beq.n	8001a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x248>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fb82 	bl	8001128 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb7e 	bl	8001128 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e167      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x200>
 8001a46:	e01b      	b.n	8001a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x248>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fb6b 	bl	8001128 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00e      	b.n	8001a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb67 	bl	8001128 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d907      	bls.n	8001a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e150      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	42470000 	.word	0x42470000
 8001a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ea      	bne.n	8001a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8097 	beq.w	8001bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a7c      	ldr	r2, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b77      	ldr	r3, [pc, #476]	; (8001c9c <HAL_RCC_OscConfig+0x474>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b74      	ldr	r3, [pc, #464]	; (8001c9c <HAL_RCC_OscConfig+0x474>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a73      	ldr	r2, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x474>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fb27 	bl	8001128 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fb23 	bl	8001128 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e10c      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x474>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2ea>
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x324>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x30c>
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a5b      	ldr	r2, [pc, #364]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0x324>
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d015      	beq.n	8001b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff fae8 	bl	8001128 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fae4 	bl	8001128 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0cb      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0ee      	beq.n	8001b5c <HAL_RCC_OscConfig+0x334>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fad2 	bl	8001128 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff face 	bl	8001128 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0b5      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1ee      	bne.n	8001b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a1 	beq.w	8001d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d05c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d141      	bne.n	8001c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCC_OscConfig+0x478>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff faa2 	bl	8001128 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fa9e 	bl	8001128 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e087      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	491b      	ldr	r1, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x478>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa77 	bl	8001128 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff fa73 	bl	8001128 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e05c      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x416>
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x478>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fa60 	bl	8001128 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fa5c 	bl	8001128 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e045      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x470>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x444>
 8001c8a:	e03d      	b.n	8001d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e038      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x4ec>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d028      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d121      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d11a      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d111      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	3b01      	subs	r3, #1
 8001cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b68      	ldr	r3, [pc, #416]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d90c      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d044      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e067      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4934      	ldr	r1, [pc, #208]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7ff f98e 	bl	8001128 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff f98a 	bl	8001128 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e04f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d20c      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f821 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8ee 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08004190 	.word	0x08004190
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee8:	b094      	sub	sp, #80	; 0x50
 8001eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d00d      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x40>
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	f200 80e1 	bhi.w	80020d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x34>
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f16:	e0db      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f1c:	e0db      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f1e:	4b73      	ldr	r3, [pc, #460]	; (80020ec <HAL_RCC_GetSysClockFreq+0x208>)
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f22:	e0d8      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	2200      	movs	r2, #0
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
 8001f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f56:	4622      	mov	r2, r4
 8001f58:	462b      	mov	r3, r5
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	0159      	lsls	r1, r3, #5
 8001f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f68:	0150      	lsls	r0, r2, #5
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4621      	mov	r1, r4
 8001f70:	1a51      	subs	r1, r2, r1
 8001f72:	6139      	str	r1, [r7, #16]
 8001f74:	4629      	mov	r1, r5
 8001f76:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f88:	4659      	mov	r1, fp
 8001f8a:	018b      	lsls	r3, r1, #6
 8001f8c:	4651      	mov	r1, sl
 8001f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f92:	4651      	mov	r1, sl
 8001f94:	018a      	lsls	r2, r1, #6
 8001f96:	4651      	mov	r1, sl
 8001f98:	ebb2 0801 	subs.w	r8, r2, r1
 8001f9c:	4659      	mov	r1, fp
 8001f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb6:	4690      	mov	r8, r2
 8001fb8:	4699      	mov	r9, r3
 8001fba:	4623      	mov	r3, r4
 8001fbc:	eb18 0303 	adds.w	r3, r8, r3
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	eb49 0303 	adc.w	r3, r9, r3
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	024b      	lsls	r3, r1, #9
 8001fda:	4621      	mov	r1, r4
 8001fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	024a      	lsls	r2, r1, #9
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fea:	2200      	movs	r2, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff4:	f7fe f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002000:	e058      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	2200      	movs	r2, #0
 800200a:	4618      	mov	r0, r3
 800200c:	4611      	mov	r1, r2
 800200e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
 8002018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800201c:	4642      	mov	r2, r8
 800201e:	464b      	mov	r3, r9
 8002020:	f04f 0000 	mov.w	r0, #0
 8002024:	f04f 0100 	mov.w	r1, #0
 8002028:	0159      	lsls	r1, r3, #5
 800202a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202e:	0150      	lsls	r0, r2, #5
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4641      	mov	r1, r8
 8002036:	ebb2 0a01 	subs.w	sl, r2, r1
 800203a:	4649      	mov	r1, r9
 800203c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800204c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002054:	ebb2 040a 	subs.w	r4, r2, sl
 8002058:	eb63 050b 	sbc.w	r5, r3, fp
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	00eb      	lsls	r3, r5, #3
 8002066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800206a:	00e2      	lsls	r2, r4, #3
 800206c:	4614      	mov	r4, r2
 800206e:	461d      	mov	r5, r3
 8002070:	4643      	mov	r3, r8
 8002072:	18e3      	adds	r3, r4, r3
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	464b      	mov	r3, r9
 8002078:	eb45 0303 	adc.w	r3, r5, r3
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208a:	4629      	mov	r1, r5
 800208c:	028b      	lsls	r3, r1, #10
 800208e:	4621      	mov	r1, r4
 8002090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002094:	4621      	mov	r1, r4
 8002096:	028a      	lsls	r2, r1, #10
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	2200      	movs	r2, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	61fa      	str	r2, [r7, #28]
 80020a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a8:	f7fe f88e 	bl	80001c8 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4613      	mov	r3, r2
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	3301      	adds	r3, #1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3750      	adds	r7, #80	; 0x50
 80020dc:	46bd      	mov	sp, r7
 80020de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000000 	.word	0x20000000

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800210c:	f7ff fff0 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4903      	ldr	r1, [pc, #12]	; (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	080041a0 	.word	0x080041a0

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002134:	f7ff ffdc 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0b5b      	lsrs	r3, r3, #13
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	080041a0 	.word	0x080041a0

08002158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07b      	b.n	8002262 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217a:	d009      	beq.n	8002190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
 8002182:	e005      	b.n	8002190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fb62 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	ea42 0103 	orr.w	r1, r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0104 	and.w	r1, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	f003 0210 	and.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08c      	sub	sp, #48	; 0x30
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x26>
 800228c:	2302      	movs	r3, #2
 800228e:	e18a      	b.n	80025a6 <HAL_SPI_TransmitReceive+0x33c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002298:	f7fe ff46 	bl	8001128 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d00f      	beq.n	80022da <HAL_SPI_TransmitReceive+0x70>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c0:	d107      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x68>
 80022ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d003      	beq.n	80022da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d8:	e15b      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x82>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x82>
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022f2:	e14e      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d003      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2205      	movs	r2, #5
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d007      	beq.n	800235c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002364:	d178      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_SPI_TransmitReceive+0x10a>
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d166      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002398:	e053      	b.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d11b      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d113      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d119      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x1b8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d014      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	b292      	uxth	r2, r2
 8002404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	1c9a      	adds	r2, r3, #2
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800241e:	2301      	movs	r3, #1
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002422:	f7fe fe81 	bl	8001128 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242e:	429a      	cmp	r2, r3
 8002430:	d807      	bhi.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d003      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002440:	e0a7      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1a6      	bne.n	800239a <HAL_SPI_TransmitReceive+0x130>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1a1      	bne.n	800239a <HAL_SPI_TransmitReceive+0x130>
 8002456:	e07c      	b.n	8002552 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x1fc>
 8002460:	8b7b      	ldrh	r3, [r7, #26]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d16b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248c:	e057      	b.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b02      	cmp	r3, #2
 800249a:	d11c      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d017      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d114      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d119      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x2ae>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d014      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002518:	f7fe fe06 	bl	8001128 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002524:	429a      	cmp	r2, r3
 8002526:	d803      	bhi.n	8002530 <HAL_SPI_TransmitReceive+0x2c6>
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d102      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x2cc>
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800253c:	e029      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1a2      	bne.n	800248e <HAL_SPI_TransmitReceive+0x224>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d19d      	bne.n	800248e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8b2 	bl	80026c0 <SPI_EndRxTxTransaction>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800256e:	e010      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	e000      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002590:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3730      	adds	r7, #48	; 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025c0:	f7fe fdb2 	bl	8001128 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025d0:	f7fe fdaa 	bl	8001128 <HAL_GetTick>
 80025d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	0d1b      	lsrs	r3, r3, #20
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025e6:	e054      	b.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d050      	beq.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025f0:	f7fe fd9a 	bl	8001128 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d902      	bls.n	8002606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13d      	bne.n	8002682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261e:	d111      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002628:	d004      	beq.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d107      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264c:	d10f      	bne.n	800266e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e017      	b.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3b01      	subs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d19b      	bne.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <SPI_EndRxTxTransaction+0x7c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <SPI_EndRxTxTransaction+0x80>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0d5b      	lsrs	r3, r3, #21
 80026d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ea:	d112      	bne.n	8002712 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ff5a 	bl	80025b0 <SPI_WaitFlagStateUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e00f      	b.n	8002732 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d0f2      	beq.n	8002712 <SPI_EndRxTxTransaction+0x52>
 800272c:	e000      	b.n	8002730 <SPI_EndRxTxTransaction+0x70>
        break;
 800272e:	bf00      	nop
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000
 8002740:	165e9f81 	.word	0x165e9f81

08002744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e03f      	b.n	80027d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe fa68 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fddf 	bl	800334c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	; 0x28
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d17c      	bne.n	80028f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_UART_Transmit+0x2c>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e075      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x3e>
 8002818:	2302      	movs	r3, #2
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x11c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002832:	f7fe fc79 	bl	8001128 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d108      	bne.n	8002860 <HAL_UART_Transmit+0x82>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e003      	b.n	8002868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002870:	e02a      	b.n	80028c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fb1f 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e036      	b.n	80028fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3302      	adds	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e007      	b.n	80028ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1cf      	bne.n	8002872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 faef 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b20      	cmp	r3, #32
 800291a:	d11d      	bne.n	8002958 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Receive_IT+0x26>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e016      	b.n	800295a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_UART_Receive_IT+0x38>
 8002936:	2302      	movs	r3, #2
 8002938:	e00f      	b.n	800295a <HAL_UART_Receive_IT+0x58>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	461a      	mov	r2, r3
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fb24 	bl	8002f9c <UART_Start_Receive_IT>
 8002954:	4603      	mov	r3, r0
 8002956:	e000      	b.n	800295a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	; 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fc07 	bl	80031d6 <UART_Receive_IT>
      return;
 80029c8:	e256      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80de 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
 80029d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80d1 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
 80029fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
 8002a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
 8002a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0208 	orr.w	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 81ed 	beq.w	8002e6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb92 	bl	80031d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_UART_IRQHandler+0x17a>
 8002ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04f      	beq.n	8002b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa9a 	bl	8003018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d141      	bne.n	8002b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1d9      	bne.n	8002af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a7d      	ldr	r2, [pc, #500]	; (8002d40 <HAL_UART_IRQHandler+0x3dc>)
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fc75 	bl	8001442 <HAL_DMA_Abort_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e00e      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f990 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00a      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f98c 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e006      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f988 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b8a:	e170      	b.n	8002e6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	bf00      	nop
    return;
 8002b8e:	e16e      	b.n	8002e6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 814a 	bne.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8143 	beq.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 813c 	beq.w	8002e2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	f040 80b4 	bne.w	8002d44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8140 	beq.w	8002e72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	f080 8139 	bcs.w	8002e72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	f000 8088 	beq.w	8002d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1d9      	bne.n	8002c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3314      	adds	r3, #20
 8002c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e1      	bne.n	8002c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e3      	bne.n	8002c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf6:	f023 0310 	bic.w	r3, r3, #16
 8002cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e3      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fb1e 	bl	8001362 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8b6 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d3c:	e099      	b.n	8002e72 <HAL_UART_IRQHandler+0x50e>
 8002d3e:	bf00      	nop
 8002d40:	080030df 	.word	0x080030df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 808b 	beq.w	8002e76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8086 	beq.w	8002e76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e3      	bne.n	8002d6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	623b      	str	r3, [r7, #32]
   return(result);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e3      	bne.n	8002de8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f83e 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2c:	e023      	b.n	8002e76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_UART_IRQHandler+0x4ea>
 8002e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f95d 	bl	8003106 <UART_Transmit_IT>
    return;
 8002e4c:	e014      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <HAL_UART_IRQHandler+0x514>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f99d 	bl	80031a6 <UART_EndTransmit_IT>
    return;
 8002e6c:	e004      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
    return;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
      return;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
      return;
 8002e76:	bf00      	nop
  }
}
 8002e78:	37e8      	adds	r7, #232	; 0xe8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed0:	e050      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d04c      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee0:	f7fe f922 	bl	8001128 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d241      	bcs.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f10:	637a      	str	r2, [r7, #52]	; 0x34
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	613b      	str	r3, [r7, #16]
   return(result);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3314      	adds	r3, #20
 8002f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f44:	623a      	str	r2, [r7, #32]
 8002f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	69f9      	ldr	r1, [r7, #28]
 8002f4a:	6a3a      	ldr	r2, [r7, #32]
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e00f      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d09f      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3740      	adds	r7, #64	; 0x40
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2222      	movs	r2, #34	; 0x22
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b095      	sub	sp, #84	; 0x54
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003040:	643a      	str	r2, [r7, #64]	; 0x40
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	61fb      	str	r3, [r7, #28]
   return(result);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800307a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	d119      	bne.n	80030c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	60bb      	str	r3, [r7, #8]
   return(result);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	647b      	str	r3, [r7, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b0:	61ba      	str	r2, [r7, #24]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	613b      	str	r3, [r7, #16]
   return(result);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030d2:	bf00      	nop
 80030d4:	3754      	adds	r7, #84	; 0x54
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff fecb 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b21      	cmp	r3, #33	; 0x21
 8003118:	d13e      	bne.n	8003198 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d114      	bne.n	800314e <UART_Transmit_IT+0x48>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d110      	bne.n	800314e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003140:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	621a      	str	r2, [r3, #32]
 800314c:	e008      	b.n	8003160 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6211      	str	r1, [r2, #32]
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4619      	mov	r1, r3
 800316e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10f      	bne.n	8003194 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003182:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003192:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fe5a 	bl	8002e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b08c      	sub	sp, #48	; 0x30
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b22      	cmp	r3, #34	; 0x22
 80031e8:	f040 80ab 	bne.w	8003342 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	d117      	bne.n	8003226 <UART_Receive_IT+0x50>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003214:	b29a      	uxth	r2, r3
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
 8003224:	e026      	b.n	8003274 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d007      	beq.n	800324a <UART_Receive_IT+0x74>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <UART_Receive_IT+0x82>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e008      	b.n	800326a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003264:	b2da      	uxtb	r2, r3
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4619      	mov	r1, r3
 8003282:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003284:	2b00      	cmp	r3, #0
 8003286:	d15a      	bne.n	800333e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0220 	bic.w	r2, r2, #32
 8003296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d135      	bne.n	8003334 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	613b      	str	r3, [r7, #16]
   return(result);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f023 0310 	bic.w	r3, r3, #16
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	623a      	str	r2, [r7, #32]
 80032f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d10a      	bne.n	8003326 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fdbb 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
 8003332:	e002      	b.n	800333a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fd fd13 	bl	8000d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3730      	adds	r7, #48	; 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003350:	b0c0      	sub	sp, #256	; 0x100
 8003352:	af00      	add	r7, sp, #0
 8003354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	68d9      	ldr	r1, [r3, #12]
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	ea40 0301 	orr.w	r3, r0, r1
 8003374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	431a      	orrs	r2, r3
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033a4:	f021 010c 	bic.w	r1, r1, #12
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033b2:	430b      	orrs	r3, r1
 80033b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	6999      	ldr	r1, [r3, #24]
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	ea40 0301 	orr.w	r3, r0, r1
 80033d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <UART_SetConfig+0x2cc>)
 80033dc:	429a      	cmp	r2, r3
 80033de:	d005      	beq.n	80033ec <UART_SetConfig+0xa0>
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b8d      	ldr	r3, [pc, #564]	; (800361c <UART_SetConfig+0x2d0>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d104      	bne.n	80033f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033ec:	f7fe fea0 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80033f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033f4:	e003      	b.n	80033fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033f6:	f7fe fe87 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 80033fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	f040 810c 	bne.w	8003624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800341a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	1891      	adds	r1, r2, r2
 8003424:	65b9      	str	r1, [r7, #88]	; 0x58
 8003426:	415b      	adcs	r3, r3
 8003428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800342a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800342e:	4621      	mov	r1, r4
 8003430:	eb12 0801 	adds.w	r8, r2, r1
 8003434:	4629      	mov	r1, r5
 8003436:	eb43 0901 	adc.w	r9, r3, r1
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344e:	4690      	mov	r8, r2
 8003450:	4699      	mov	r9, r3
 8003452:	4623      	mov	r3, r4
 8003454:	eb18 0303 	adds.w	r3, r8, r3
 8003458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800345c:	462b      	mov	r3, r5
 800345e:	eb49 0303 	adc.w	r3, r9, r3
 8003462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800347a:	460b      	mov	r3, r1
 800347c:	18db      	adds	r3, r3, r3
 800347e:	653b      	str	r3, [r7, #80]	; 0x50
 8003480:	4613      	mov	r3, r2
 8003482:	eb42 0303 	adc.w	r3, r2, r3
 8003486:	657b      	str	r3, [r7, #84]	; 0x54
 8003488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800348c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003490:	f7fc fe9a 	bl	80001c8 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4b61      	ldr	r3, [pc, #388]	; (8003620 <UART_SetConfig+0x2d4>)
 800349a:	fba3 2302 	umull	r2, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	011c      	lsls	r4, r3, #4
 80034a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80034bc:	415b      	adcs	r3, r3
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034c4:	4641      	mov	r1, r8
 80034c6:	eb12 0a01 	adds.w	sl, r2, r1
 80034ca:	4649      	mov	r1, r9
 80034cc:	eb43 0b01 	adc.w	fp, r3, r1
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e4:	4692      	mov	sl, r2
 80034e6:	469b      	mov	fp, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	eb1a 0303 	adds.w	r3, sl, r3
 80034ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f2:	464b      	mov	r3, r9
 80034f4:	eb4b 0303 	adc.w	r3, fp, r3
 80034f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800350c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003510:	460b      	mov	r3, r1
 8003512:	18db      	adds	r3, r3, r3
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
 8003516:	4613      	mov	r3, r2
 8003518:	eb42 0303 	adc.w	r3, r2, r3
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
 800351e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003526:	f7fc fe4f 	bl	80001c8 <__aeabi_uldivmod>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4611      	mov	r1, r2
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <UART_SetConfig+0x2d4>)
 8003532:	fba3 2301 	umull	r2, r3, r3, r1
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2264      	movs	r2, #100	; 0x64
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	1acb      	subs	r3, r1, r3
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <UART_SetConfig+0x2d4>)
 8003548:	fba3 2302 	umull	r2, r3, r3, r2
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003554:	441c      	add	r4, r3
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	1891      	adds	r1, r2, r2
 800356e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003570:	415b      	adcs	r3, r3
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003578:	4641      	mov	r1, r8
 800357a:	1851      	adds	r1, r2, r1
 800357c:	6339      	str	r1, [r7, #48]	; 0x30
 800357e:	4649      	mov	r1, r9
 8003580:	414b      	adcs	r3, r1
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003590:	4659      	mov	r1, fp
 8003592:	00cb      	lsls	r3, r1, #3
 8003594:	4651      	mov	r1, sl
 8003596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359a:	4651      	mov	r1, sl
 800359c:	00ca      	lsls	r2, r1, #3
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	4642      	mov	r2, r8
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035ac:	464b      	mov	r3, r9
 80035ae:	460a      	mov	r2, r1
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035cc:	460b      	mov	r3, r1
 80035ce:	18db      	adds	r3, r3, r3
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d2:	4613      	mov	r3, r2
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035e2:	f7fc fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <UART_SetConfig+0x2d4>)
 80035ec:	fba3 1302 	umull	r1, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	3332      	adds	r3, #50	; 0x32
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <UART_SetConfig+0x2d4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 0207 	and.w	r2, r3, #7
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4422      	add	r2, r4
 8003612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003614:	e106      	b.n	8003824 <UART_SetConfig+0x4d8>
 8003616:	bf00      	nop
 8003618:	40011000 	.word	0x40011000
 800361c:	40011400 	.word	0x40011400
 8003620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003628:	2200      	movs	r2, #0
 800362a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800362e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003636:	4642      	mov	r2, r8
 8003638:	464b      	mov	r3, r9
 800363a:	1891      	adds	r1, r2, r2
 800363c:	6239      	str	r1, [r7, #32]
 800363e:	415b      	adcs	r3, r3
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003646:	4641      	mov	r1, r8
 8003648:	1854      	adds	r4, r2, r1
 800364a:	4649      	mov	r1, r9
 800364c:	eb43 0501 	adc.w	r5, r3, r1
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	00eb      	lsls	r3, r5, #3
 800365a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365e:	00e2      	lsls	r2, r4, #3
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	4643      	mov	r3, r8
 8003666:	18e3      	adds	r3, r4, r3
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800366c:	464b      	mov	r3, r9
 800366e:	eb45 0303 	adc.w	r3, r5, r3
 8003672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003692:	4629      	mov	r1, r5
 8003694:	008b      	lsls	r3, r1, #2
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369c:	4621      	mov	r1, r4
 800369e:	008a      	lsls	r2, r1, #2
 80036a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036a4:	f7fc fd90 	bl	80001c8 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4b60      	ldr	r3, [pc, #384]	; (8003830 <UART_SetConfig+0x4e4>)
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	011c      	lsls	r4, r3, #4
 80036b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	61b9      	str	r1, [r7, #24]
 80036d0:	415b      	adcs	r3, r3
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d8:	4641      	mov	r1, r8
 80036da:	1851      	adds	r1, r2, r1
 80036dc:	6139      	str	r1, [r7, #16]
 80036de:	4649      	mov	r1, r9
 80036e0:	414b      	adcs	r3, r1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f0:	4659      	mov	r1, fp
 80036f2:	00cb      	lsls	r3, r1, #3
 80036f4:	4651      	mov	r1, sl
 80036f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fa:	4651      	mov	r1, sl
 80036fc:	00ca      	lsls	r2, r1, #3
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	4603      	mov	r3, r0
 8003704:	4642      	mov	r2, r8
 8003706:	189b      	adds	r3, r3, r2
 8003708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800370c:	464b      	mov	r3, r9
 800370e:	460a      	mov	r2, r1
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	67bb      	str	r3, [r7, #120]	; 0x78
 8003722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003730:	4649      	mov	r1, r9
 8003732:	008b      	lsls	r3, r1, #2
 8003734:	4641      	mov	r1, r8
 8003736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800373a:	4641      	mov	r1, r8
 800373c:	008a      	lsls	r2, r1, #2
 800373e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003742:	f7fc fd41 	bl	80001c8 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4611      	mov	r1, r2
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <UART_SetConfig+0x4e4>)
 800374e:	fba3 2301 	umull	r2, r3, r3, r1
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	1acb      	subs	r3, r1, r3
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	3332      	adds	r3, #50	; 0x32
 8003760:	4a33      	ldr	r2, [pc, #204]	; (8003830 <UART_SetConfig+0x4e4>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800376c:	441c      	add	r4, r3
 800376e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003772:	2200      	movs	r2, #0
 8003774:	673b      	str	r3, [r7, #112]	; 0x70
 8003776:	677a      	str	r2, [r7, #116]	; 0x74
 8003778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	415b      	adcs	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378c:	4641      	mov	r1, r8
 800378e:	1851      	adds	r1, r2, r1
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	4649      	mov	r1, r9
 8003794:	414b      	adcs	r3, r1
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037a4:	4659      	mov	r1, fp
 80037a6:	00cb      	lsls	r3, r1, #3
 80037a8:	4651      	mov	r1, sl
 80037aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ae:	4651      	mov	r1, sl
 80037b0:	00ca      	lsls	r2, r1, #3
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	4642      	mov	r2, r8
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80037be:	464b      	mov	r3, r9
 80037c0:	460a      	mov	r2, r1
 80037c2:	eb42 0303 	adc.w	r3, r2, r3
 80037c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
 80037d2:	667a      	str	r2, [r7, #100]	; 0x64
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037e0:	4649      	mov	r1, r9
 80037e2:	008b      	lsls	r3, r1, #2
 80037e4:	4641      	mov	r1, r8
 80037e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ea:	4641      	mov	r1, r8
 80037ec:	008a      	lsls	r2, r1, #2
 80037ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037f2:	f7fc fce9 	bl	80001c8 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <UART_SetConfig+0x4e4>)
 80037fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	2164      	movs	r1, #100	; 0x64
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	3332      	adds	r3, #50	; 0x32
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <UART_SetConfig+0x4e4>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4422      	add	r2, r4
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800382a:	46bd      	mov	sp, r7
 800382c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003830:	51eb851f 	.word	0x51eb851f

08003834 <std>:
 8003834:	2300      	movs	r3, #0
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
 800383a:	e9c0 3300 	strd	r3, r3, [r0]
 800383e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003842:	6083      	str	r3, [r0, #8]
 8003844:	8181      	strh	r1, [r0, #12]
 8003846:	6643      	str	r3, [r0, #100]	; 0x64
 8003848:	81c2      	strh	r2, [r0, #14]
 800384a:	6183      	str	r3, [r0, #24]
 800384c:	4619      	mov	r1, r3
 800384e:	2208      	movs	r2, #8
 8003850:	305c      	adds	r0, #92	; 0x5c
 8003852:	f000 f9d3 	bl	8003bfc <memset>
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <std+0x38>)
 8003858:	6263      	str	r3, [r4, #36]	; 0x24
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <std+0x3c>)
 800385c:	62a3      	str	r3, [r4, #40]	; 0x28
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <std+0x40>)
 8003860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <std+0x44>)
 8003864:	6224      	str	r4, [r4, #32]
 8003866:	6323      	str	r3, [r4, #48]	; 0x30
 8003868:	bd10      	pop	{r4, pc}
 800386a:	bf00      	nop
 800386c:	08003a4d 	.word	0x08003a4d
 8003870:	08003a6f 	.word	0x08003a6f
 8003874:	08003aa7 	.word	0x08003aa7
 8003878:	08003acb 	.word	0x08003acb

0800387c <stdio_exit_handler>:
 800387c:	4a02      	ldr	r2, [pc, #8]	; (8003888 <stdio_exit_handler+0xc>)
 800387e:	4903      	ldr	r1, [pc, #12]	; (800388c <stdio_exit_handler+0x10>)
 8003880:	4803      	ldr	r0, [pc, #12]	; (8003890 <stdio_exit_handler+0x14>)
 8003882:	f000 b869 	b.w	8003958 <_fwalk_sglue>
 8003886:	bf00      	nop
 8003888:	2000000c 	.word	0x2000000c
 800388c:	08003fed 	.word	0x08003fed
 8003890:	20000018 	.word	0x20000018

08003894 <cleanup_stdio>:
 8003894:	6841      	ldr	r1, [r0, #4]
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <cleanup_stdio+0x34>)
 8003898:	4299      	cmp	r1, r3
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	d001      	beq.n	80038a4 <cleanup_stdio+0x10>
 80038a0:	f000 fba4 	bl	8003fec <_fflush_r>
 80038a4:	68a1      	ldr	r1, [r4, #8]
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <cleanup_stdio+0x38>)
 80038a8:	4299      	cmp	r1, r3
 80038aa:	d002      	beq.n	80038b2 <cleanup_stdio+0x1e>
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 fb9d 	bl	8003fec <_fflush_r>
 80038b2:	68e1      	ldr	r1, [r4, #12]
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <cleanup_stdio+0x3c>)
 80038b6:	4299      	cmp	r1, r3
 80038b8:	d004      	beq.n	80038c4 <cleanup_stdio+0x30>
 80038ba:	4620      	mov	r0, r4
 80038bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c0:	f000 bb94 	b.w	8003fec <_fflush_r>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	bf00      	nop
 80038c8:	20000310 	.word	0x20000310
 80038cc:	20000378 	.word	0x20000378
 80038d0:	200003e0 	.word	0x200003e0

080038d4 <global_stdio_init.part.0>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <global_stdio_init.part.0+0x30>)
 80038d8:	4c0b      	ldr	r4, [pc, #44]	; (8003908 <global_stdio_init.part.0+0x34>)
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <global_stdio_init.part.0+0x38>)
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	4620      	mov	r0, r4
 80038e0:	2200      	movs	r2, #0
 80038e2:	2104      	movs	r1, #4
 80038e4:	f7ff ffa6 	bl	8003834 <std>
 80038e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80038ec:	2201      	movs	r2, #1
 80038ee:	2109      	movs	r1, #9
 80038f0:	f7ff ffa0 	bl	8003834 <std>
 80038f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038f8:	2202      	movs	r2, #2
 80038fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fe:	2112      	movs	r1, #18
 8003900:	f7ff bf98 	b.w	8003834 <std>
 8003904:	20000448 	.word	0x20000448
 8003908:	20000310 	.word	0x20000310
 800390c:	0800387d 	.word	0x0800387d

08003910 <__sfp_lock_acquire>:
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <__sfp_lock_acquire+0x8>)
 8003912:	f000 b9eb 	b.w	8003cec <__retarget_lock_acquire_recursive>
 8003916:	bf00      	nop
 8003918:	20000451 	.word	0x20000451

0800391c <__sfp_lock_release>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__sfp_lock_release+0x8>)
 800391e:	f000 b9e6 	b.w	8003cee <__retarget_lock_release_recursive>
 8003922:	bf00      	nop
 8003924:	20000451 	.word	0x20000451

08003928 <__sinit>:
 8003928:	b510      	push	{r4, lr}
 800392a:	4604      	mov	r4, r0
 800392c:	f7ff fff0 	bl	8003910 <__sfp_lock_acquire>
 8003930:	6a23      	ldr	r3, [r4, #32]
 8003932:	b11b      	cbz	r3, 800393c <__sinit+0x14>
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	f7ff bff0 	b.w	800391c <__sfp_lock_release>
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <__sinit+0x28>)
 800393e:	6223      	str	r3, [r4, #32]
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <__sinit+0x2c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f5      	bne.n	8003934 <__sinit+0xc>
 8003948:	f7ff ffc4 	bl	80038d4 <global_stdio_init.part.0>
 800394c:	e7f2      	b.n	8003934 <__sinit+0xc>
 800394e:	bf00      	nop
 8003950:	08003895 	.word	0x08003895
 8003954:	20000448 	.word	0x20000448

08003958 <_fwalk_sglue>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	4607      	mov	r7, r0
 800395e:	4688      	mov	r8, r1
 8003960:	4614      	mov	r4, r2
 8003962:	2600      	movs	r6, #0
 8003964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003968:	f1b9 0901 	subs.w	r9, r9, #1
 800396c:	d505      	bpl.n	800397a <_fwalk_sglue+0x22>
 800396e:	6824      	ldr	r4, [r4, #0]
 8003970:	2c00      	cmp	r4, #0
 8003972:	d1f7      	bne.n	8003964 <_fwalk_sglue+0xc>
 8003974:	4630      	mov	r0, r6
 8003976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397a:	89ab      	ldrh	r3, [r5, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d907      	bls.n	8003990 <_fwalk_sglue+0x38>
 8003980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003984:	3301      	adds	r3, #1
 8003986:	d003      	beq.n	8003990 <_fwalk_sglue+0x38>
 8003988:	4629      	mov	r1, r5
 800398a:	4638      	mov	r0, r7
 800398c:	47c0      	blx	r8
 800398e:	4306      	orrs	r6, r0
 8003990:	3568      	adds	r5, #104	; 0x68
 8003992:	e7e9      	b.n	8003968 <_fwalk_sglue+0x10>

08003994 <_puts_r>:
 8003994:	6a03      	ldr	r3, [r0, #32]
 8003996:	b570      	push	{r4, r5, r6, lr}
 8003998:	6884      	ldr	r4, [r0, #8]
 800399a:	4605      	mov	r5, r0
 800399c:	460e      	mov	r6, r1
 800399e:	b90b      	cbnz	r3, 80039a4 <_puts_r+0x10>
 80039a0:	f7ff ffc2 	bl	8003928 <__sinit>
 80039a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039a6:	07db      	lsls	r3, r3, #31
 80039a8:	d405      	bmi.n	80039b6 <_puts_r+0x22>
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	0598      	lsls	r0, r3, #22
 80039ae:	d402      	bmi.n	80039b6 <_puts_r+0x22>
 80039b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039b2:	f000 f99b 	bl	8003cec <__retarget_lock_acquire_recursive>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	0719      	lsls	r1, r3, #28
 80039ba:	d513      	bpl.n	80039e4 <_puts_r+0x50>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	b18b      	cbz	r3, 80039e4 <_puts_r+0x50>
 80039c0:	3e01      	subs	r6, #1
 80039c2:	68a3      	ldr	r3, [r4, #8]
 80039c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60a3      	str	r3, [r4, #8]
 80039cc:	b9e9      	cbnz	r1, 8003a0a <_puts_r+0x76>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da2e      	bge.n	8003a30 <_puts_r+0x9c>
 80039d2:	4622      	mov	r2, r4
 80039d4:	210a      	movs	r1, #10
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 f87b 	bl	8003ad2 <__swbuf_r>
 80039dc:	3001      	adds	r0, #1
 80039de:	d007      	beq.n	80039f0 <_puts_r+0x5c>
 80039e0:	250a      	movs	r5, #10
 80039e2:	e007      	b.n	80039f4 <_puts_r+0x60>
 80039e4:	4621      	mov	r1, r4
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f8b0 	bl	8003b4c <__swsetup_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d0e7      	beq.n	80039c0 <_puts_r+0x2c>
 80039f0:	f04f 35ff 	mov.w	r5, #4294967295
 80039f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039f6:	07da      	lsls	r2, r3, #31
 80039f8:	d405      	bmi.n	8003a06 <_puts_r+0x72>
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	059b      	lsls	r3, r3, #22
 80039fe:	d402      	bmi.n	8003a06 <_puts_r+0x72>
 8003a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a02:	f000 f974 	bl	8003cee <__retarget_lock_release_recursive>
 8003a06:	4628      	mov	r0, r5
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da04      	bge.n	8003a18 <_puts_r+0x84>
 8003a0e:	69a2      	ldr	r2, [r4, #24]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	dc06      	bgt.n	8003a22 <_puts_r+0x8e>
 8003a14:	290a      	cmp	r1, #10
 8003a16:	d004      	beq.n	8003a22 <_puts_r+0x8e>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	6022      	str	r2, [r4, #0]
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	e7cf      	b.n	80039c2 <_puts_r+0x2e>
 8003a22:	4622      	mov	r2, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f000 f854 	bl	8003ad2 <__swbuf_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1c9      	bne.n	80039c2 <_puts_r+0x2e>
 8003a2e:	e7df      	b.n	80039f0 <_puts_r+0x5c>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	250a      	movs	r5, #10
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	6022      	str	r2, [r4, #0]
 8003a38:	701d      	strb	r5, [r3, #0]
 8003a3a:	e7db      	b.n	80039f4 <_puts_r+0x60>

08003a3c <puts>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <puts+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f7ff bfa7 	b.w	8003994 <_puts_r>
 8003a46:	bf00      	nop
 8003a48:	20000064 	.word	0x20000064

08003a4c <__sread>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	460c      	mov	r4, r1
 8003a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a54:	f000 f8fc 	bl	8003c50 <_read_r>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	bfab      	itete	ge
 8003a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a60:	181b      	addge	r3, r3, r0
 8003a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a66:	bfac      	ite	ge
 8003a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a6a:	81a3      	strhlt	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__swrite>:
 8003a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	461f      	mov	r7, r3
 8003a74:	898b      	ldrh	r3, [r1, #12]
 8003a76:	05db      	lsls	r3, r3, #23
 8003a78:	4605      	mov	r5, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	d505      	bpl.n	8003a8c <__swrite+0x1e>
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	2302      	movs	r3, #2
 8003a86:	2200      	movs	r2, #0
 8003a88:	f000 f8d0 	bl	8003c2c <_lseek_r>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	f000 b8e7 	b.w	8003c74 <_write_r>

08003aa6 <__sseek>:
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aae:	f000 f8bd 	bl	8003c2c <_lseek_r>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	bf15      	itete	ne
 8003ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ac2:	81a3      	strheq	r3, [r4, #12]
 8003ac4:	bf18      	it	ne
 8003ac6:	81a3      	strhne	r3, [r4, #12]
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <__sclose>:
 8003aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ace:	f000 b89d 	b.w	8003c0c <_close_r>

08003ad2 <__swbuf_r>:
 8003ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	4605      	mov	r5, r0
 8003ada:	b118      	cbz	r0, 8003ae4 <__swbuf_r+0x12>
 8003adc:	6a03      	ldr	r3, [r0, #32]
 8003ade:	b90b      	cbnz	r3, 8003ae4 <__swbuf_r+0x12>
 8003ae0:	f7ff ff22 	bl	8003928 <__sinit>
 8003ae4:	69a3      	ldr	r3, [r4, #24]
 8003ae6:	60a3      	str	r3, [r4, #8]
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	071a      	lsls	r2, r3, #28
 8003aec:	d525      	bpl.n	8003b3a <__swbuf_r+0x68>
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b31b      	cbz	r3, 8003b3a <__swbuf_r+0x68>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	1a98      	subs	r0, r3, r2
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	b2f6      	uxtb	r6, r6
 8003afc:	4283      	cmp	r3, r0
 8003afe:	4637      	mov	r7, r6
 8003b00:	dc04      	bgt.n	8003b0c <__swbuf_r+0x3a>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 fa71 	bl	8003fec <_fflush_r>
 8003b0a:	b9e0      	cbnz	r0, 8003b46 <__swbuf_r+0x74>
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60a3      	str	r3, [r4, #8]
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	701e      	strb	r6, [r3, #0]
 8003b1a:	6962      	ldr	r2, [r4, #20]
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d004      	beq.n	8003b2c <__swbuf_r+0x5a>
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	07db      	lsls	r3, r3, #31
 8003b26:	d506      	bpl.n	8003b36 <__swbuf_r+0x64>
 8003b28:	2e0a      	cmp	r6, #10
 8003b2a:	d104      	bne.n	8003b36 <__swbuf_r+0x64>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fa5c 	bl	8003fec <_fflush_r>
 8003b34:	b938      	cbnz	r0, 8003b46 <__swbuf_r+0x74>
 8003b36:	4638      	mov	r0, r7
 8003b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 f805 	bl	8003b4c <__swsetup_r>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d0d5      	beq.n	8003af2 <__swbuf_r+0x20>
 8003b46:	f04f 37ff 	mov.w	r7, #4294967295
 8003b4a:	e7f4      	b.n	8003b36 <__swbuf_r+0x64>

08003b4c <__swsetup_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <__swsetup_r+0xac>)
 8003b50:	4605      	mov	r5, r0
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	460c      	mov	r4, r1
 8003b56:	b118      	cbz	r0, 8003b60 <__swsetup_r+0x14>
 8003b58:	6a03      	ldr	r3, [r0, #32]
 8003b5a:	b90b      	cbnz	r3, 8003b60 <__swsetup_r+0x14>
 8003b5c:	f7ff fee4 	bl	8003928 <__sinit>
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b66:	0718      	lsls	r0, r3, #28
 8003b68:	d422      	bmi.n	8003bb0 <__swsetup_r+0x64>
 8003b6a:	06d9      	lsls	r1, r3, #27
 8003b6c:	d407      	bmi.n	8003b7e <__swsetup_r+0x32>
 8003b6e:	2309      	movs	r3, #9
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	e034      	b.n	8003be8 <__swsetup_r+0x9c>
 8003b7e:	0758      	lsls	r0, r3, #29
 8003b80:	d512      	bpl.n	8003ba8 <__swsetup_r+0x5c>
 8003b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b84:	b141      	cbz	r1, 8003b98 <__swsetup_r+0x4c>
 8003b86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b8a:	4299      	cmp	r1, r3
 8003b8c:	d002      	beq.n	8003b94 <__swsetup_r+0x48>
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 f8ae 	bl	8003cf0 <_free_r>
 8003b94:	2300      	movs	r3, #0
 8003b96:	6363      	str	r3, [r4, #52]	; 0x34
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	6923      	ldr	r3, [r4, #16]
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f043 0308 	orr.w	r3, r3, #8
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	6923      	ldr	r3, [r4, #16]
 8003bb2:	b94b      	cbnz	r3, 8003bc8 <__swsetup_r+0x7c>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbe:	d003      	beq.n	8003bc8 <__swsetup_r+0x7c>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 fa60 	bl	8004088 <__smakebuf_r>
 8003bc8:	89a0      	ldrh	r0, [r4, #12]
 8003bca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bce:	f010 0301 	ands.w	r3, r0, #1
 8003bd2:	d00a      	beq.n	8003bea <__swsetup_r+0x9e>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60a3      	str	r3, [r4, #8]
 8003bd8:	6963      	ldr	r3, [r4, #20]
 8003bda:	425b      	negs	r3, r3
 8003bdc:	61a3      	str	r3, [r4, #24]
 8003bde:	6923      	ldr	r3, [r4, #16]
 8003be0:	b943      	cbnz	r3, 8003bf4 <__swsetup_r+0xa8>
 8003be2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003be6:	d1c4      	bne.n	8003b72 <__swsetup_r+0x26>
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	0781      	lsls	r1, r0, #30
 8003bec:	bf58      	it	pl
 8003bee:	6963      	ldrpl	r3, [r4, #20]
 8003bf0:	60a3      	str	r3, [r4, #8]
 8003bf2:	e7f4      	b.n	8003bde <__swsetup_r+0x92>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e7f7      	b.n	8003be8 <__swsetup_r+0x9c>
 8003bf8:	20000064 	.word	0x20000064

08003bfc <memset>:
 8003bfc:	4402      	add	r2, r0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d100      	bne.n	8003c06 <memset+0xa>
 8003c04:	4770      	bx	lr
 8003c06:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0a:	e7f9      	b.n	8003c00 <memset+0x4>

08003c0c <_close_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d06      	ldr	r5, [pc, #24]	; (8003c28 <_close_r+0x1c>)
 8003c10:	2300      	movs	r3, #0
 8003c12:	4604      	mov	r4, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	f7fc ff29 	bl	8000a6e <_close>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_close_r+0x1a>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_close_r+0x1a>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	2000044c 	.word	0x2000044c

08003c2c <_lseek_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d07      	ldr	r5, [pc, #28]	; (8003c4c <_lseek_r+0x20>)
 8003c30:	4604      	mov	r4, r0
 8003c32:	4608      	mov	r0, r1
 8003c34:	4611      	mov	r1, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	602a      	str	r2, [r5, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7fc ff3e 	bl	8000abc <_lseek>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_lseek_r+0x1e>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_lseek_r+0x1e>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	2000044c 	.word	0x2000044c

08003c50 <_read_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d07      	ldr	r5, [pc, #28]	; (8003c70 <_read_r+0x20>)
 8003c54:	4604      	mov	r4, r0
 8003c56:	4608      	mov	r0, r1
 8003c58:	4611      	mov	r1, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	602a      	str	r2, [r5, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f7fc fecc 	bl	80009fc <_read>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_read_r+0x1e>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_read_r+0x1e>
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	2000044c 	.word	0x2000044c

08003c74 <_write_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4d07      	ldr	r5, [pc, #28]	; (8003c94 <_write_r+0x20>)
 8003c78:	4604      	mov	r4, r0
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	2200      	movs	r2, #0
 8003c80:	602a      	str	r2, [r5, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f7fc fed7 	bl	8000a36 <_write>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_write_r+0x1e>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_write_r+0x1e>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	2000044c 	.word	0x2000044c

08003c98 <__errno>:
 8003c98:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <__errno+0x8>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000064 	.word	0x20000064

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4d0d      	ldr	r5, [pc, #52]	; (8003cdc <__libc_init_array+0x38>)
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003caa:	1b64      	subs	r4, r4, r5
 8003cac:	10a4      	asrs	r4, r4, #2
 8003cae:	2600      	movs	r6, #0
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ce4 <__libc_init_array+0x40>)
 8003cb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ce8 <__libc_init_array+0x44>)
 8003cb8:	f000 fa54 	bl	8004164 <_init>
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	080041b0 	.word	0x080041b0
 8003ce0:	080041b0 	.word	0x080041b0
 8003ce4:	080041b0 	.word	0x080041b0
 8003ce8:	080041b4 	.word	0x080041b4

08003cec <__retarget_lock_acquire_recursive>:
 8003cec:	4770      	bx	lr

08003cee <__retarget_lock_release_recursive>:
 8003cee:	4770      	bx	lr

08003cf0 <_free_r>:
 8003cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cf2:	2900      	cmp	r1, #0
 8003cf4:	d044      	beq.n	8003d80 <_free_r+0x90>
 8003cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cfa:	9001      	str	r0, [sp, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8003d02:	bfb8      	it	lt
 8003d04:	18e4      	addlt	r4, r4, r3
 8003d06:	f000 f8df 	bl	8003ec8 <__malloc_lock>
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <_free_r+0x94>)
 8003d0c:	9801      	ldr	r0, [sp, #4]
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	b933      	cbnz	r3, 8003d20 <_free_r+0x30>
 8003d12:	6063      	str	r3, [r4, #4]
 8003d14:	6014      	str	r4, [r2, #0]
 8003d16:	b003      	add	sp, #12
 8003d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d1c:	f000 b8da 	b.w	8003ed4 <__malloc_unlock>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d908      	bls.n	8003d36 <_free_r+0x46>
 8003d24:	6825      	ldr	r5, [r4, #0]
 8003d26:	1961      	adds	r1, r4, r5
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	bf01      	itttt	eq
 8003d2c:	6819      	ldreq	r1, [r3, #0]
 8003d2e:	685b      	ldreq	r3, [r3, #4]
 8003d30:	1949      	addeq	r1, r1, r5
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	e7ed      	b.n	8003d12 <_free_r+0x22>
 8003d36:	461a      	mov	r2, r3
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b10b      	cbz	r3, 8003d40 <_free_r+0x50>
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d9fa      	bls.n	8003d36 <_free_r+0x46>
 8003d40:	6811      	ldr	r1, [r2, #0]
 8003d42:	1855      	adds	r5, r2, r1
 8003d44:	42a5      	cmp	r5, r4
 8003d46:	d10b      	bne.n	8003d60 <_free_r+0x70>
 8003d48:	6824      	ldr	r4, [r4, #0]
 8003d4a:	4421      	add	r1, r4
 8003d4c:	1854      	adds	r4, r2, r1
 8003d4e:	42a3      	cmp	r3, r4
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	d1e0      	bne.n	8003d16 <_free_r+0x26>
 8003d54:	681c      	ldr	r4, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	440c      	add	r4, r1
 8003d5c:	6014      	str	r4, [r2, #0]
 8003d5e:	e7da      	b.n	8003d16 <_free_r+0x26>
 8003d60:	d902      	bls.n	8003d68 <_free_r+0x78>
 8003d62:	230c      	movs	r3, #12
 8003d64:	6003      	str	r3, [r0, #0]
 8003d66:	e7d6      	b.n	8003d16 <_free_r+0x26>
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	1961      	adds	r1, r4, r5
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf04      	itt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	bf04      	itt	eq
 8003d78:	1949      	addeq	r1, r1, r5
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	6054      	str	r4, [r2, #4]
 8003d7e:	e7ca      	b.n	8003d16 <_free_r+0x26>
 8003d80:	b003      	add	sp, #12
 8003d82:	bd30      	pop	{r4, r5, pc}
 8003d84:	20000454 	.word	0x20000454

08003d88 <sbrk_aligned>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4e0e      	ldr	r6, [pc, #56]	; (8003dc4 <sbrk_aligned+0x3c>)
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	6831      	ldr	r1, [r6, #0]
 8003d90:	4605      	mov	r5, r0
 8003d92:	b911      	cbnz	r1, 8003d9a <sbrk_aligned+0x12>
 8003d94:	f000 f9d6 	bl	8004144 <_sbrk_r>
 8003d98:	6030      	str	r0, [r6, #0]
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 f9d1 	bl	8004144 <_sbrk_r>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d00a      	beq.n	8003dbc <sbrk_aligned+0x34>
 8003da6:	1cc4      	adds	r4, r0, #3
 8003da8:	f024 0403 	bic.w	r4, r4, #3
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d007      	beq.n	8003dc0 <sbrk_aligned+0x38>
 8003db0:	1a21      	subs	r1, r4, r0
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f9c6 	bl	8004144 <_sbrk_r>
 8003db8:	3001      	adds	r0, #1
 8003dba:	d101      	bne.n	8003dc0 <sbrk_aligned+0x38>
 8003dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	20000458 	.word	0x20000458

08003dc8 <_malloc_r>:
 8003dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dcc:	1ccd      	adds	r5, r1, #3
 8003dce:	f025 0503 	bic.w	r5, r5, #3
 8003dd2:	3508      	adds	r5, #8
 8003dd4:	2d0c      	cmp	r5, #12
 8003dd6:	bf38      	it	cc
 8003dd8:	250c      	movcc	r5, #12
 8003dda:	2d00      	cmp	r5, #0
 8003ddc:	4607      	mov	r7, r0
 8003dde:	db01      	blt.n	8003de4 <_malloc_r+0x1c>
 8003de0:	42a9      	cmp	r1, r5
 8003de2:	d905      	bls.n	8003df0 <_malloc_r+0x28>
 8003de4:	230c      	movs	r3, #12
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	2600      	movs	r6, #0
 8003dea:	4630      	mov	r0, r6
 8003dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ec4 <_malloc_r+0xfc>
 8003df4:	f000 f868 	bl	8003ec8 <__malloc_lock>
 8003df8:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfc:	461c      	mov	r4, r3
 8003dfe:	bb5c      	cbnz	r4, 8003e58 <_malloc_r+0x90>
 8003e00:	4629      	mov	r1, r5
 8003e02:	4638      	mov	r0, r7
 8003e04:	f7ff ffc0 	bl	8003d88 <sbrk_aligned>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	d155      	bne.n	8003eba <_malloc_r+0xf2>
 8003e0e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e12:	4626      	mov	r6, r4
 8003e14:	2e00      	cmp	r6, #0
 8003e16:	d145      	bne.n	8003ea4 <_malloc_r+0xdc>
 8003e18:	2c00      	cmp	r4, #0
 8003e1a:	d048      	beq.n	8003eae <_malloc_r+0xe6>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4638      	mov	r0, r7
 8003e22:	eb04 0903 	add.w	r9, r4, r3
 8003e26:	f000 f98d 	bl	8004144 <_sbrk_r>
 8003e2a:	4581      	cmp	r9, r0
 8003e2c:	d13f      	bne.n	8003eae <_malloc_r+0xe6>
 8003e2e:	6821      	ldr	r1, [r4, #0]
 8003e30:	1a6d      	subs	r5, r5, r1
 8003e32:	4629      	mov	r1, r5
 8003e34:	4638      	mov	r0, r7
 8003e36:	f7ff ffa7 	bl	8003d88 <sbrk_aligned>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d037      	beq.n	8003eae <_malloc_r+0xe6>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	442b      	add	r3, r5
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	f8d8 3000 	ldr.w	r3, [r8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d038      	beq.n	8003ebe <_malloc_r+0xf6>
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	42a2      	cmp	r2, r4
 8003e50:	d12b      	bne.n	8003eaa <_malloc_r+0xe2>
 8003e52:	2200      	movs	r2, #0
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	e00f      	b.n	8003e78 <_malloc_r+0xb0>
 8003e58:	6822      	ldr	r2, [r4, #0]
 8003e5a:	1b52      	subs	r2, r2, r5
 8003e5c:	d41f      	bmi.n	8003e9e <_malloc_r+0xd6>
 8003e5e:	2a0b      	cmp	r2, #11
 8003e60:	d917      	bls.n	8003e92 <_malloc_r+0xca>
 8003e62:	1961      	adds	r1, r4, r5
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	6025      	str	r5, [r4, #0]
 8003e68:	bf18      	it	ne
 8003e6a:	6059      	strne	r1, [r3, #4]
 8003e6c:	6863      	ldr	r3, [r4, #4]
 8003e6e:	bf08      	it	eq
 8003e70:	f8c8 1000 	streq.w	r1, [r8]
 8003e74:	5162      	str	r2, [r4, r5]
 8003e76:	604b      	str	r3, [r1, #4]
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f104 060b 	add.w	r6, r4, #11
 8003e7e:	f000 f829 	bl	8003ed4 <__malloc_unlock>
 8003e82:	f026 0607 	bic.w	r6, r6, #7
 8003e86:	1d23      	adds	r3, r4, #4
 8003e88:	1af2      	subs	r2, r6, r3
 8003e8a:	d0ae      	beq.n	8003dea <_malloc_r+0x22>
 8003e8c:	1b9b      	subs	r3, r3, r6
 8003e8e:	50a3      	str	r3, [r4, r2]
 8003e90:	e7ab      	b.n	8003dea <_malloc_r+0x22>
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	6862      	ldr	r2, [r4, #4]
 8003e96:	d1dd      	bne.n	8003e54 <_malloc_r+0x8c>
 8003e98:	f8c8 2000 	str.w	r2, [r8]
 8003e9c:	e7ec      	b.n	8003e78 <_malloc_r+0xb0>
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	6864      	ldr	r4, [r4, #4]
 8003ea2:	e7ac      	b.n	8003dfe <_malloc_r+0x36>
 8003ea4:	4634      	mov	r4, r6
 8003ea6:	6876      	ldr	r6, [r6, #4]
 8003ea8:	e7b4      	b.n	8003e14 <_malloc_r+0x4c>
 8003eaa:	4613      	mov	r3, r2
 8003eac:	e7cc      	b.n	8003e48 <_malloc_r+0x80>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f000 f80e 	bl	8003ed4 <__malloc_unlock>
 8003eb8:	e797      	b.n	8003dea <_malloc_r+0x22>
 8003eba:	6025      	str	r5, [r4, #0]
 8003ebc:	e7dc      	b.n	8003e78 <_malloc_r+0xb0>
 8003ebe:	605b      	str	r3, [r3, #4]
 8003ec0:	deff      	udf	#255	; 0xff
 8003ec2:	bf00      	nop
 8003ec4:	20000454 	.word	0x20000454

08003ec8 <__malloc_lock>:
 8003ec8:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <__malloc_lock+0x8>)
 8003eca:	f7ff bf0f 	b.w	8003cec <__retarget_lock_acquire_recursive>
 8003ece:	bf00      	nop
 8003ed0:	20000450 	.word	0x20000450

08003ed4 <__malloc_unlock>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__malloc_unlock+0x8>)
 8003ed6:	f7ff bf0a 	b.w	8003cee <__retarget_lock_release_recursive>
 8003eda:	bf00      	nop
 8003edc:	20000450 	.word	0x20000450

08003ee0 <__sflush_r>:
 8003ee0:	898a      	ldrh	r2, [r1, #12]
 8003ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	0710      	lsls	r0, r2, #28
 8003eea:	460c      	mov	r4, r1
 8003eec:	d458      	bmi.n	8003fa0 <__sflush_r+0xc0>
 8003eee:	684b      	ldr	r3, [r1, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dc05      	bgt.n	8003f00 <__sflush_r+0x20>
 8003ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dc02      	bgt.n	8003f00 <__sflush_r+0x20>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d0f9      	beq.n	8003efa <__sflush_r+0x1a>
 8003f06:	2300      	movs	r3, #0
 8003f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f0c:	682f      	ldr	r7, [r5, #0]
 8003f0e:	6a21      	ldr	r1, [r4, #32]
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	d032      	beq.n	8003f7a <__sflush_r+0x9a>
 8003f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	075a      	lsls	r2, r3, #29
 8003f1a:	d505      	bpl.n	8003f28 <__sflush_r+0x48>
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	1ac0      	subs	r0, r0, r3
 8003f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f22:	b10b      	cbz	r3, 8003f28 <__sflush_r+0x48>
 8003f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f26:	1ac0      	subs	r0, r0, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f2e:	6a21      	ldr	r1, [r4, #32]
 8003f30:	4628      	mov	r0, r5
 8003f32:	47b0      	blx	r6
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	d106      	bne.n	8003f48 <__sflush_r+0x68>
 8003f3a:	6829      	ldr	r1, [r5, #0]
 8003f3c:	291d      	cmp	r1, #29
 8003f3e:	d82b      	bhi.n	8003f98 <__sflush_r+0xb8>
 8003f40:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <__sflush_r+0x108>)
 8003f42:	410a      	asrs	r2, r1
 8003f44:	07d6      	lsls	r6, r2, #31
 8003f46:	d427      	bmi.n	8003f98 <__sflush_r+0xb8>
 8003f48:	2200      	movs	r2, #0
 8003f4a:	6062      	str	r2, [r4, #4]
 8003f4c:	04d9      	lsls	r1, r3, #19
 8003f4e:	6922      	ldr	r2, [r4, #16]
 8003f50:	6022      	str	r2, [r4, #0]
 8003f52:	d504      	bpl.n	8003f5e <__sflush_r+0x7e>
 8003f54:	1c42      	adds	r2, r0, #1
 8003f56:	d101      	bne.n	8003f5c <__sflush_r+0x7c>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b903      	cbnz	r3, 8003f5e <__sflush_r+0x7e>
 8003f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8003f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f60:	602f      	str	r7, [r5, #0]
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d0c9      	beq.n	8003efa <__sflush_r+0x1a>
 8003f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	d002      	beq.n	8003f74 <__sflush_r+0x94>
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f7ff febe 	bl	8003cf0 <_free_r>
 8003f74:	2000      	movs	r0, #0
 8003f76:	6360      	str	r0, [r4, #52]	; 0x34
 8003f78:	e7c0      	b.n	8003efc <__sflush_r+0x1c>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b0      	blx	r6
 8003f80:	1c41      	adds	r1, r0, #1
 8003f82:	d1c8      	bne.n	8003f16 <__sflush_r+0x36>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0c5      	beq.n	8003f16 <__sflush_r+0x36>
 8003f8a:	2b1d      	cmp	r3, #29
 8003f8c:	d001      	beq.n	8003f92 <__sflush_r+0xb2>
 8003f8e:	2b16      	cmp	r3, #22
 8003f90:	d101      	bne.n	8003f96 <__sflush_r+0xb6>
 8003f92:	602f      	str	r7, [r5, #0]
 8003f94:	e7b1      	b.n	8003efa <__sflush_r+0x1a>
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	e7ad      	b.n	8003efc <__sflush_r+0x1c>
 8003fa0:	690f      	ldr	r7, [r1, #16]
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	d0a9      	beq.n	8003efa <__sflush_r+0x1a>
 8003fa6:	0793      	lsls	r3, r2, #30
 8003fa8:	680e      	ldr	r6, [r1, #0]
 8003faa:	bf08      	it	eq
 8003fac:	694b      	ldreq	r3, [r1, #20]
 8003fae:	600f      	str	r7, [r1, #0]
 8003fb0:	bf18      	it	ne
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	eba6 0807 	sub.w	r8, r6, r7
 8003fb8:	608b      	str	r3, [r1, #8]
 8003fba:	f1b8 0f00 	cmp.w	r8, #0
 8003fbe:	dd9c      	ble.n	8003efa <__sflush_r+0x1a>
 8003fc0:	6a21      	ldr	r1, [r4, #32]
 8003fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	463a      	mov	r2, r7
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b0      	blx	r6
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	dc06      	bgt.n	8003fde <__sflush_r+0xfe>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	e78e      	b.n	8003efc <__sflush_r+0x1c>
 8003fde:	4407      	add	r7, r0
 8003fe0:	eba8 0800 	sub.w	r8, r8, r0
 8003fe4:	e7e9      	b.n	8003fba <__sflush_r+0xda>
 8003fe6:	bf00      	nop
 8003fe8:	dfbffffe 	.word	0xdfbffffe

08003fec <_fflush_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b913      	cbnz	r3, 8003ffc <_fflush_r+0x10>
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	b118      	cbz	r0, 8004006 <_fflush_r+0x1a>
 8003ffe:	6a03      	ldr	r3, [r0, #32]
 8004000:	b90b      	cbnz	r3, 8004006 <_fflush_r+0x1a>
 8004002:	f7ff fc91 	bl	8003928 <__sinit>
 8004006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f3      	beq.n	8003ff6 <_fflush_r+0xa>
 800400e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004010:	07d0      	lsls	r0, r2, #31
 8004012:	d404      	bmi.n	800401e <_fflush_r+0x32>
 8004014:	0599      	lsls	r1, r3, #22
 8004016:	d402      	bmi.n	800401e <_fflush_r+0x32>
 8004018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401a:	f7ff fe67 	bl	8003cec <__retarget_lock_acquire_recursive>
 800401e:	4628      	mov	r0, r5
 8004020:	4621      	mov	r1, r4
 8004022:	f7ff ff5d 	bl	8003ee0 <__sflush_r>
 8004026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004028:	07da      	lsls	r2, r3, #31
 800402a:	4605      	mov	r5, r0
 800402c:	d4e4      	bmi.n	8003ff8 <_fflush_r+0xc>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	059b      	lsls	r3, r3, #22
 8004032:	d4e1      	bmi.n	8003ff8 <_fflush_r+0xc>
 8004034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004036:	f7ff fe5a 	bl	8003cee <__retarget_lock_release_recursive>
 800403a:	e7dd      	b.n	8003ff8 <_fflush_r+0xc>

0800403c <__swhatbuf_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	460c      	mov	r4, r1
 8004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004044:	2900      	cmp	r1, #0
 8004046:	b096      	sub	sp, #88	; 0x58
 8004048:	4615      	mov	r5, r2
 800404a:	461e      	mov	r6, r3
 800404c:	da0d      	bge.n	800406a <__swhatbuf_r+0x2e>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	bf0c      	ite	eq
 800405a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800405e:	2340      	movne	r3, #64	; 0x40
 8004060:	2000      	movs	r0, #0
 8004062:	6031      	str	r1, [r6, #0]
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	b016      	add	sp, #88	; 0x58
 8004068:	bd70      	pop	{r4, r5, r6, pc}
 800406a:	466a      	mov	r2, sp
 800406c:	f000 f848 	bl	8004100 <_fstat_r>
 8004070:	2800      	cmp	r0, #0
 8004072:	dbec      	blt.n	800404e <__swhatbuf_r+0x12>
 8004074:	9901      	ldr	r1, [sp, #4]
 8004076:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800407a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800407e:	4259      	negs	r1, r3
 8004080:	4159      	adcs	r1, r3
 8004082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004086:	e7eb      	b.n	8004060 <__swhatbuf_r+0x24>

08004088 <__smakebuf_r>:
 8004088:	898b      	ldrh	r3, [r1, #12]
 800408a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800408c:	079d      	lsls	r5, r3, #30
 800408e:	4606      	mov	r6, r0
 8004090:	460c      	mov	r4, r1
 8004092:	d507      	bpl.n	80040a4 <__smakebuf_r+0x1c>
 8004094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	2301      	movs	r3, #1
 800409e:	6163      	str	r3, [r4, #20]
 80040a0:	b002      	add	sp, #8
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	ab01      	add	r3, sp, #4
 80040a6:	466a      	mov	r2, sp
 80040a8:	f7ff ffc8 	bl	800403c <__swhatbuf_r>
 80040ac:	9900      	ldr	r1, [sp, #0]
 80040ae:	4605      	mov	r5, r0
 80040b0:	4630      	mov	r0, r6
 80040b2:	f7ff fe89 	bl	8003dc8 <_malloc_r>
 80040b6:	b948      	cbnz	r0, 80040cc <__smakebuf_r+0x44>
 80040b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040bc:	059a      	lsls	r2, r3, #22
 80040be:	d4ef      	bmi.n	80040a0 <__smakebuf_r+0x18>
 80040c0:	f023 0303 	bic.w	r3, r3, #3
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	e7e3      	b.n	8004094 <__smakebuf_r+0xc>
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	6020      	str	r0, [r4, #0]
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	6163      	str	r3, [r4, #20]
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	6120      	str	r0, [r4, #16]
 80040de:	b15b      	cbz	r3, 80040f8 <__smakebuf_r+0x70>
 80040e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f81d 	bl	8004124 <_isatty_r>
 80040ea:	b128      	cbz	r0, 80040f8 <__smakebuf_r+0x70>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	431d      	orrs	r5, r3
 80040fc:	81a5      	strh	r5, [r4, #12]
 80040fe:	e7cf      	b.n	80040a0 <__smakebuf_r+0x18>

08004100 <_fstat_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	; (8004120 <_fstat_r+0x20>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	f7fc fcba 	bl	8000a86 <_fstat>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d102      	bne.n	800411c <_fstat_r+0x1c>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	b103      	cbz	r3, 800411c <_fstat_r+0x1c>
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	2000044c 	.word	0x2000044c

08004124 <_isatty_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d06      	ldr	r5, [pc, #24]	; (8004140 <_isatty_r+0x1c>)
 8004128:	2300      	movs	r3, #0
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fcb9 	bl	8000aa6 <_isatty>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_isatty_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_isatty_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	2000044c 	.word	0x2000044c

08004144 <_sbrk_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4d06      	ldr	r5, [pc, #24]	; (8004160 <_sbrk_r+0x1c>)
 8004148:	2300      	movs	r3, #0
 800414a:	4604      	mov	r4, r0
 800414c:	4608      	mov	r0, r1
 800414e:	602b      	str	r3, [r5, #0]
 8004150:	f7fc fcc2 	bl	8000ad8 <_sbrk>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_sbrk_r+0x1a>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_sbrk_r+0x1a>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	2000044c 	.word	0x2000044c

08004164 <_init>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr

08004170 <_fini>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr
