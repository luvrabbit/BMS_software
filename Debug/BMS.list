
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003f4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bdd1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023ca  00000000  00000000  0002beb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a78  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ea  00000000  00000000  0002ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f16  00000000  00000000  0002f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e571  00000000  00000000  000513f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c658e  00000000  00000000  0005f969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f08  00000000  00000000  00125ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00128e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043b4 	.word	0x080043b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080043b4 	.word	0x080043b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b4f      	ldr	r3, [pc, #316]	; (800061c <MX_GPIO_Init+0x158>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a4e      	ldr	r2, [pc, #312]	; (800061c <MX_GPIO_Init+0x158>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b4c      	ldr	r3, [pc, #304]	; (800061c <MX_GPIO_Init+0x158>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b48      	ldr	r3, [pc, #288]	; (800061c <MX_GPIO_Init+0x158>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a47      	ldr	r2, [pc, #284]	; (800061c <MX_GPIO_Init+0x158>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <MX_GPIO_Init+0x158>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b41      	ldr	r3, [pc, #260]	; (800061c <MX_GPIO_Init+0x158>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a40      	ldr	r2, [pc, #256]	; (800061c <MX_GPIO_Init+0x158>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b3e      	ldr	r3, [pc, #248]	; (800061c <MX_GPIO_Init+0x158>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_GPIO_Init+0x158>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a39      	ldr	r2, [pc, #228]	; (800061c <MX_GPIO_Init+0x158>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <MX_GPIO_Init+0x158>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <MX_GPIO_Init+0x158>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a32      	ldr	r2, [pc, #200]	; (800061c <MX_GPIO_Init+0x158>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <MX_GPIO_Init+0x158>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2130      	movs	r1, #48	; 0x30
 800056a:	482d      	ldr	r0, [pc, #180]	; (8000620 <MX_GPIO_Init+0x15c>)
 800056c:	f001 fa50 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	482b      	ldr	r0, [pc, #172]	; (8000624 <MX_GPIO_Init+0x160>)
 8000578:	f001 fa4a 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4829      	ldr	r0, [pc, #164]	; (8000628 <MX_GPIO_Init+0x164>)
 8000584:	f001 fa44 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000588:	2310      	movs	r3, #16
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <MX_GPIO_Init+0x15c>)
 80005a0:	f001 f89a 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 80005a4:	2320      	movs	r3, #32
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <MX_GPIO_Init+0x15c>)
 80005bc:	f001 f88c 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <MX_GPIO_Init+0x164>)
 80005d4:	f001 f880 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_MODE_Pin;
 80005d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PLC_MODE_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_GPIO_Init+0x160>)
 80005f2:	f001 f871 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80005f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_GPIO_Init+0x164>)
 8000610:	f001 f862 	bl	80016d8 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fe3b 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f863 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff ff43 	bl	80004c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063e:	f000 fa9d 	bl	8000b7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000642:	f000 fac5 	bl	8000bd0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000646:	f000 f8cb 	bl	80007e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t test[4] = {10, 109, 97, 10};
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <main+0xb0>)
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t nrf_rx[33];
  nrf_init();
 800064e:	f000 fcff 	bl	8001050 <nrf_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    USART_RX_TX(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 fc26 	bl	8000ea4 <USART_RX_TX>
    USART_RX_TX(3);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 fc23 	bl	8000ea4 <USART_RX_TX>
//    delay_us(1);
    times++;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0xb4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <main+0xb4>)
 8000666:	6013      	str	r3, [r2, #0]
    if ((times % 500000) == 0) {
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <main+0xb4>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <main+0xb8>)
 800066e:	fba3 1302 	umull	r1, r3, r3, r2
 8000672:	0c5b      	lsrs	r3, r3, #17
 8000674:	491c      	ldr	r1, [pc, #112]	; (80006e8 <main+0xbc>)
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <main+0x5e>
      HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <main+0xc0>)
 8000686:	f001 f9dc 	bl	8001a42 <HAL_GPIO_TogglePin>
    }
    if (g_usart3_rx_sta & 0x8000) { // USART3 receive PC info
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <main+0xc4>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b21b      	sxth	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	dade      	bge.n	8000652 <main+0x26>
      uint32_t len;
      len = g_usart3_rx_sta & 0x3fff; // message length
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0xc4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (g_usart3_rx_buf[0] == 0x01) { // first Byte is 1, send PC message to PLC
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <main+0xc8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d115      	bne.n	80006d2 <main+0xa6>
    	  printf("\n 收到PC message \n");
 80006a6:	4814      	ldr	r0, [pc, #80]	; (80006f8 <main+0xcc>)
 80006a8:	f003 faf0 	bl	8003c8c <puts>
        nrf_rx_mode();
 80006ac:	f000 fd8a 	bl	80011c4 <nrf_rx_mode>
        if (nrf_rx_packet(nrf_rx) == 0) {
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fdb6 	bl	8001224 <nrf_rx_packet>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d109      	bne.n	80006d2 <main+0xa6>
          nrf_rx[32] = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          HAL_UART_Transmit(&huart3, nrf_rx, 33, 1000);
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	2221      	movs	r2, #33	; 0x21
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0xd0>)
 80006ce:	f002 f9ae 	bl	8002a2e <HAL_UART_Transmit>
        }
      }
      g_usart3_rx_sta = 0;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <main+0xc4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	801a      	strh	r2, [r3, #0]
    USART_RX_TX(1);
 80006d8:	e7bb      	b.n	8000652 <main+0x26>
 80006da:	bf00      	nop
 80006dc:	0a616d0a 	.word	0x0a616d0a
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	431bde83 	.word	0x431bde83
 80006e8:	0007a120 	.word	0x0007a120
 80006ec:	40020400 	.word	0x40020400
 80006f0:	200001b4 	.word	0x200001b4
 80006f4:	200000ec 	.word	0x200000ec
 80006f8:	080043cc 	.word	0x080043cc
 80006fc:	200002d0 	.word	0x200002d0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fb9c 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000774:	23a8      	movs	r3, #168	; 0xa8
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f977 	bl	8001a78 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 f820 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2105      	movs	r1, #5
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fbd8 	bl	8001f68 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007be:	f000 f809 	bl	80007d4 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_SPI1_Init+0x7c>)
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <MX_SPI1_Init+0x80>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_SPI1_Init+0x7c>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_SPI1_Init+0x7c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI1_Init+0x7c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI1_Init+0x7c>)
 8000800:	2202      	movs	r2, #2
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI1_Init+0x7c>)
 8000806:	2201      	movs	r2, #1
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI1_Init+0x7c>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI1_Init+0x7c>)
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_SPI1_Init+0x7c>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI1_Init+0x7c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_SPI1_Init+0x7c>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI1_Init+0x7c>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <MX_SPI1_Init+0x7c>)
 8000832:	f001 fdb9 	bl	80023a8 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f7ff ffca 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI1_Init+0x7c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_SPI1_Init+0x7c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800084e:	601a      	str	r2, [r3, #0]
  spi1_read_write_byte(0xff);
 8000850:	20ff      	movs	r0, #255	; 0xff
 8000852:	f000 f84f 	bl	80008f4 <spi1_read_write_byte>
  /* USER CODE END SPI1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000090 	.word	0x20000090
 8000860:	40013000 	.word	0x40013000

08000864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <HAL_SPI_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12b      	bne.n	80008de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_SPI_MspInit+0x88>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x88>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_SPI_MspInit+0x88>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_SPI_MspInit+0x88>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_SPI_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23e0      	movs	r3, #224	; 0xe0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0x8c>)
 80008da:	f000 fefd 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <spi1_read_write_byte>:
/*
  @brief  SPI1 read write one byte data
  @param  txdata: data to be sent
  @ret    data received
*/
uint8_t spi1_read_write_byte(uint8_t txdata) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;
  HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 1000);
 80008fe:	f107 020f 	add.w	r2, r7, #15
 8000902:	1df9      	adds	r1, r7, #7
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <spi1_read_write_byte+0x28>)
 800090e:	f001 fdd4 	bl	80024ba <HAL_SPI_TransmitReceive>
  return rxdata;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000090 	.word	0x20000090

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800095e:	2005      	movs	r0, #5
 8000960:	f000 fde6 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fcc8 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART1_IRQHandler+0x10>)
 80009ca:	f002 f8f3 	bl	8002bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000028c 	.word	0x2000028c

080009d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USART3_IRQHandler+0x10>)
 80009de:	f002 f8e9 	bl	8002bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002d0 	.word	0x200002d0

080009ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	4601      	mov	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
  }

  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f889 	bl	8000b58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
  }
  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f003 f9f6 	bl	8003ee8 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20020000 	.word	0x20020000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	200000e8 	.word	0x200000e8
 8000b30:	20000468 	.word	0x20000468

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b60:	1d39      	adds	r1, r7, #4
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	2201      	movs	r2, #1
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <__io_putchar+0x20>)
 8000b6a:	f001 ff60 	bl	8002a2e <HAL_UART_Transmit>
 return ch;
 8000b6e:	687b      	ldr	r3, [r7, #4]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200002d0 	.word	0x200002d0

08000b7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART1_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f001 feee 	bl	8002994 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f7ff fe09 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000028c 	.word	0x2000028c
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000c08:	f001 fec4 	bl	8002994 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f7ff fddf 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)g_usart3_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000c16:	2201      	movs	r2, #1
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <MX_USART3_UART_Init+0x5c>)
 8000c1a:	4802      	ldr	r0, [pc, #8]	; (8000c24 <MX_USART3_UART_Init+0x54>)
 8000c1c:	f001 ff99 	bl	8002b52 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200002d0 	.word	0x200002d0
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	200001b8 	.word	0x200001b8

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <HAL_UART_MspInit+0x10c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d135      	bne.n	8000cbe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4827      	ldr	r0, [pc, #156]	; (8000d44 <HAL_UART_MspInit+0x114>)
 8000ca8:	f000 fd16 	bl	80016d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 3);
 8000cac:	2203      	movs	r2, #3
 8000cae:	2102      	movs	r1, #2
 8000cb0:	2025      	movs	r0, #37	; 0x25
 8000cb2:	f000 fc48 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cb6:	2025      	movs	r0, #37	; 0x25
 8000cb8:	f000 fc61 	bl	800157e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cbc:	e039      	b.n	8000d32 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_UART_MspInit+0x118>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d134      	bne.n	8000d32 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d12:	2307      	movs	r3, #7
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0x11c>)
 8000d1e:	f000 fcdb 	bl	80016d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 2);
 8000d22:	2202      	movs	r2, #2
 8000d24:	2102      	movs	r1, #2
 8000d26:	2027      	movs	r0, #39	; 0x27
 8000d28:	f000 fc0d 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2c:	2027      	movs	r0, #39	; 0x27
 8000d2e:	f000 fc26 	bl	800157e <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	; 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {                                  // USART3(PC)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_UART_RxCpltCallback+0x130>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d145      	bne.n	8000dee <HAL_UART_RxCpltCallback+0x9e>
		if ((g_usart3_rx_sta & 0x8000) == 0) {                          // 接收未完�? 
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db3a      	blt.n	8000de2 <HAL_UART_RxCpltCallback+0x92>
			if (!(g_usart3_rx_sta & 0x4000)) {                            // 未接收到0x0D（回�?)
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d123      	bne.n	8000dc0 <HAL_UART_RxCpltCallback+0x70>
				if (g_usart3_hal_rx_buffer[0] == 0x0d) {                     // 接收�?0x0D
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_UART_RxCpltCallback+0x138>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b0d      	cmp	r3, #13
 8000d7e:	d107      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0x40>
					g_usart3_rx_sta |= 0x4000;                                // 回车标志�? �?1
 8000d80:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000d8c:	801a      	strh	r2, [r3, #0]
 8000d8e:	e028      	b.n	8000de2 <HAL_UART_RxCpltCallback+0x92>
				} else {
          g_usart3_rx_buf[USART3_END] = g_usart3_hal_rx_buffer[0];  // 将接收到的字符放入rx_buf�?
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d98:	4a3b      	ldr	r2, [pc, #236]	; (8000e88 <HAL_UART_RxCpltCallback+0x138>)
 8000d9a:	7811      	ldrb	r1, [r2, #0]
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <HAL_UART_RxCpltCallback+0x13c>)
 8000d9e:	54d1      	strb	r1, [r2, r3]
          g_usart3_rx_sta += 1;
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000daa:	801a      	strh	r2, [r3, #0]
          if (USART3_END > USART_RX_LEN - 1) {
 8000dac:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000db4:	2bc7      	cmp	r3, #199	; 0xc7
 8000db6:	dd14      	ble.n	8000de2 <HAL_UART_RxCpltCallback+0x92>
            g_usart3_rx_sta = 0;                                    // 接收数据大于200，重新接�?
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	e010      	b.n	8000de2 <HAL_UART_RxCpltCallback+0x92>
          }
				}
			} else {
        if (g_usart3_hal_rx_buffer[0] == 0x0a) {
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <HAL_UART_RxCpltCallback+0x138>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b0a      	cmp	r3, #10
 8000dc6:	d109      	bne.n	8000ddc <HAL_UART_RxCpltCallback+0x8c>
          g_usart3_rx_sta |= 0x8000;                                // 接收完成
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	e002      	b.n	8000de2 <HAL_UART_RxCpltCallback+0x92>
        } else {
          g_usart3_rx_sta = 0;                                      // 接收错误，重新接�?
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_UART_RxCpltCallback+0x134>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]
        }
      }
		}
    HAL_UART_Receive_IT(&huart3, (uint8_t *)g_usart3_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4928      	ldr	r1, [pc, #160]	; (8000e88 <HAL_UART_RxCpltCallback+0x138>)
 8000de6:	482a      	ldr	r0, [pc, #168]	; (8000e90 <HAL_UART_RxCpltCallback+0x140>)
 8000de8:	f001 feb3 	bl	8002b52 <HAL_UART_Receive_IT>
        }
      }
		}
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_usart1_hal_rx_buffer, USART_RX_BUFFER_SIZE);
  }
}
 8000dec:	e044      	b.n	8000e78 <HAL_UART_RxCpltCallback+0x128>
    if ((g_usart1_rx_sta & 0x8000) == 0) {                          // 接收未完�? 
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db3a      	blt.n	8000e6e <HAL_UART_RxCpltCallback+0x11e>
			if (!(g_usart1_rx_sta & 0x4000)) {                            // 未接收到0x0D（回�?)
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d123      	bne.n	8000e4c <HAL_UART_RxCpltCallback+0xfc>
				if (g_usart1_hal_rx_buffer[0] == 0x0d) {                     // 接收�?0x0D
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_UART_RxCpltCallback+0x148>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b0d      	cmp	r3, #13
 8000e0a:	d107      	bne.n	8000e1c <HAL_UART_RxCpltCallback+0xcc>
					g_usart1_rx_sta |= 0x4000;                                // 回车标志�? �?1
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e18:	801a      	strh	r2, [r3, #0]
 8000e1a:	e028      	b.n	8000e6e <HAL_UART_RxCpltCallback+0x11e>
          g_usart1_rx_buf[USART1_END] = g_usart1_hal_rx_buffer[0];  // 将接收到的字符放入rx_buf�?
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <HAL_UART_RxCpltCallback+0x148>)
 8000e26:	7811      	ldrb	r1, [r2, #0]
 8000e28:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_UART_RxCpltCallback+0x14c>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
          g_usart1_rx_sta += 1;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e36:	801a      	strh	r2, [r3, #0]
          if (USART1_END > USART_RX_LEN - 1) {
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e40:	2bc7      	cmp	r3, #199	; 0xc7
 8000e42:	dd14      	ble.n	8000e6e <HAL_UART_RxCpltCallback+0x11e>
            g_usart1_rx_sta = 0;                                    // 接收数据大于200，重新接�?
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	e010      	b.n	8000e6e <HAL_UART_RxCpltCallback+0x11e>
        if (g_usart1_hal_rx_buffer[0] == 0x0a) {
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_RxCpltCallback+0x148>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	d109      	bne.n	8000e68 <HAL_UART_RxCpltCallback+0x118>
          g_usart1_rx_sta |= 0x8000;                                // 接收完成
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e64:	801a      	strh	r2, [r3, #0]
 8000e66:	e002      	b.n	8000e6e <HAL_UART_RxCpltCallback+0x11e>
          g_usart1_rx_sta = 0;                                      // 接收错误，重新接�?
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_UART_RxCpltCallback+0x144>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_usart1_hal_rx_buffer, USART_RX_BUFFER_SIZE);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4909      	ldr	r1, [pc, #36]	; (8000e98 <HAL_UART_RxCpltCallback+0x148>)
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <HAL_UART_RxCpltCallback+0x150>)
 8000e74:	f001 fe6d 	bl	8002b52 <HAL_UART_Receive_IT>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	200001b4 	.word	0x200001b4
 8000e88:	200001b8 	.word	0x200001b8
 8000e8c:	200000ec 	.word	0x200000ec
 8000e90:	200002d0 	.word	0x200002d0
 8000e94:	20000284 	.word	0x20000284
 8000e98:	20000288 	.word	0x20000288
 8000e9c:	200001bc 	.word	0x200001bc
 8000ea0:	2000028c 	.word	0x2000028c

08000ea4 <USART_RX_TX>:

// id == 1: USART1(PLC) reveive info and send to USART3(PC)
// id == 3: USART3(PC) reveive info and send to USART1(PLC)
void USART_RX_TX(uint8_t id) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if (id == 1) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d102      	bne.n	8000eba <USART_RX_TX+0x16>
    USART1_RX_USART3_TX();
 8000eb4:	f000 f80a 	bl	8000ecc <USART1_RX_USART3_TX>
  } else if (id == 3) {
    USART3_RX_USART1_TX();
  }
}
 8000eb8:	e004      	b.n	8000ec4 <USART_RX_TX+0x20>
  } else if (id == 3) {
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d101      	bne.n	8000ec4 <USART_RX_TX+0x20>
    USART3_RX_USART1_TX();
 8000ec0:	f000 f83a 	bl	8000f38 <USART3_RX_USART1_TX>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <USART1_RX_USART3_TX>:

void USART1_RX_USART3_TX() { // USART1(PLC) reveive info and send to USART3(PC)
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  if (g_usart1_rx_sta & 0x8000) { // USART1 receive PLC info
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <USART1_RX_USART3_TX+0x54>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da1d      	bge.n	8000f18 <USART1_RX_USART3_TX+0x4c>
    uint32_t len;
    len = g_usart1_rx_sta & 0x3fff;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <USART1_RX_USART3_TX+0x54>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ee4:	607b      	str	r3, [r7, #4]
    // send message to USART3(PC)
    printf("\r\nPLC message:\r\n");
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <USART1_RX_USART3_TX+0x58>)
 8000ee8:	f002 fed0 	bl	8003c8c <puts>
    HAL_UART_Transmit(&huart3, (uint8_t*)g_usart1_rx_buf, len, 1000);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <USART1_RX_USART3_TX+0x5c>)
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <USART1_RX_USART3_TX+0x60>)
 8000ef8:	f001 fd99 	bl	8002a2e <HAL_UART_Transmit>
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != SET);
 8000efc:	bf00      	nop
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <USART1_RX_USART3_TX+0x64>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f08:	2b40      	cmp	r3, #64	; 0x40
 8000f0a:	d1f8      	bne.n	8000efe <USART1_RX_USART3_TX+0x32>
    printf("\r\n\r\n");
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <USART1_RX_USART3_TX+0x68>)
 8000f0e:	f002 febd 	bl	8003c8c <puts>
    g_usart1_rx_sta = 0;
 8000f12:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <USART1_RX_USART3_TX+0x54>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000284 	.word	0x20000284
 8000f24:	080043e0 	.word	0x080043e0
 8000f28:	200001bc 	.word	0x200001bc
 8000f2c:	200002d0 	.word	0x200002d0
 8000f30:	2000028c 	.word	0x2000028c
 8000f34:	080043f0 	.word	0x080043f0

08000f38 <USART3_RX_USART1_TX>:

void USART3_RX_USART1_TX() { // USART3(PC) reveive info and send to USART1(PLC)
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  if (g_usart3_rx_sta & 0x8000) { // USART3 receive PC info
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <USART3_RX_USART1_TX+0x70>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da2a      	bge.n	8000f9e <USART3_RX_USART1_TX+0x66>
    uint32_t len;
    len = g_usart3_rx_sta & 0x3fff;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <USART3_RX_USART1_TX+0x70>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f50:	607b      	str	r3, [r7, #4]
    if (g_usart3_rx_buf[0] == 0x01) { // first Byte is 1, send PC message to PLC
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <USART3_RX_USART1_TX+0x74>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d112      	bne.n	8000f80 <USART3_RX_USART1_TX+0x48>
      // send message to USART1(PLC)
      HAL_UART_Transmit(&huart1, (uint8_t*)(&g_usart3_rx_buf[1]), len - 1, 1000);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	4912      	ldr	r1, [pc, #72]	; (8000fb0 <USART3_RX_USART1_TX+0x78>)
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <USART3_RX_USART1_TX+0x7c>)
 8000f6a:	f001 fd60 	bl	8002a2e <HAL_UART_Transmit>
      while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != SET);
 8000f6e:	bf00      	nop
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <USART3_RX_USART1_TX+0x7c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	2b40      	cmp	r3, #64	; 0x40
 8000f7c:	d1f8      	bne.n	8000f70 <USART3_RX_USART1_TX+0x38>
 8000f7e:	e00b      	b.n	8000f98 <USART3_RX_USART1_TX+0x60>
    } else if (g_usart3_rx_buf[0] == 0x00) { // first Byte is 0, change PLC mode
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <USART3_RX_USART1_TX+0x74>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d107      	bne.n	8000f98 <USART3_RX_USART1_TX+0x60>
      plc_change_mode(g_usart3_rx_buf[1]);
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <USART3_RX_USART1_TX+0x74>)
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f96f 	bl	8001270 <plc_change_mode>
      printf("\r\n\r\n");
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <USART3_RX_USART1_TX+0x80>)
 8000f94:	f002 fe7a 	bl	8003c8c <puts>
    }
    g_usart3_rx_sta = 0;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <USART3_RX_USART1_TX+0x70>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001b4 	.word	0x200001b4
 8000fac:	200000ec 	.word	0x200000ec
 8000fb0:	200000ed 	.word	0x200000ed
 8000fb4:	2000028c 	.word	0x2000028c
 8000fb8:	080043f0 	.word	0x080043f0

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff fda5 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 ff83 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fb1d 	bl	800062c <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001000:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 8001004:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001008:	20000464 	.word	0x20000464

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <nrf_spi_init>:
#include "nrf24l01p.h"

uint8_t TX_ADDR[5] = {0xF0, 0xF0, 0xF0, 0xF0};
uint8_t RX_ADDR[5] = {0xF0, 0xF0, 0xF0, 0xF0};

void nrf_spi_init() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(&hspi1);
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <nrf_spi_init+0x3c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <nrf_spi_init+0x3c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001022:	601a      	str	r2, [r3, #0]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <nrf_spi_init+0x3c>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <nrf_spi_init+0x3c>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1);
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <nrf_spi_init+0x3c>)
 8001032:	f001 f9b9 	bl	80023a8 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&hspi1);
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <nrf_spi_init+0x3c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <nrf_spi_init+0x3c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000090 	.word	0x20000090

08001050 <nrf_init>:

void nrf_init() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	MX_SPI1_Init();				/* initialize SPI2 */
 8001054:	f7ff fbc4 	bl	80007e0 <MX_SPI1_Init>
    nrf_spi_init();             /* modify SPI setting */
 8001058:	f7ff ffda 	bl	8001010 <nrf_spi_init>
    NRF_CE(0);                  /* enable nrf24l01 */
 800105c:	2200      	movs	r2, #0
 800105e:	2110      	movs	r1, #16
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <nrf_init+0x24>)
 8001062:	f000 fcd5 	bl	8001a10 <HAL_GPIO_WritePin>
    NRF_CS(1);                  /* SPI CS cancel */
 8001066:	2201      	movs	r2, #1
 8001068:	2120      	movs	r1, #32
 800106a:	4802      	ldr	r0, [pc, #8]	; (8001074 <nrf_init+0x24>)
 800106c:	f000 fcd0 	bl	8001a10 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020800 	.word	0x40020800

08001078 <nrf_write_reg>:
 * @brief       NRF24L01 write register
 * @param       reg   : register address 
 * @param       value : value to be written 
 * @retval      status register value 
 */
uint8_t nrf_write_reg(uint8_t reg, uint8_t value) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
    NRF_CS(0);                          /* SPI select nrf*/
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <nrf_write_reg+0x44>)
 800108e:	f000 fcbf 	bl	8001a10 <HAL_GPIO_WritePin>
    status = spi1_read_write_byte(reg); /* instruction */
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fc2d 	bl	80008f4 <spi1_read_write_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
    spi1_read_write_byte(value);        /* write value */
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fc27 	bl	80008f4 <spi1_read_write_byte>
    NRF_CS(1);                          /* SPI cancel select nrf */
 80010a6:	2201      	movs	r2, #1
 80010a8:	2120      	movs	r1, #32
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <nrf_write_reg+0x44>)
 80010ac:	f000 fcb0 	bl	8001a10 <HAL_GPIO_WritePin>
    return status;                      /* return status */
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020800 	.word	0x40020800

080010c0 <nrf_read_reg>:
/**
 * @brief       NRF24L01 read register
 * @param       reg   : register address 
 * @retval      register value;
 */
uint8_t nrf_read_reg(uint8_t reg) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    uint8_t reg_val;
    NRF_CS(0);                             /* SPI select nrf */
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <nrf_read_reg+0x3c>)
 80010d0:	f000 fc9e 	bl	8001a10 <HAL_GPIO_WritePin>
    spi1_read_write_byte(reg);             /* send reg address */
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc0c 	bl	80008f4 <spi1_read_write_byte>
    reg_val = spi1_read_write_byte(NOP);   /* read value */
 80010dc:	20ff      	movs	r0, #255	; 0xff
 80010de:	f7ff fc09 	bl	80008f4 <spi1_read_write_byte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
    NRF_CS(1);                             /* SPI cancel select nrf */
 80010e6:	2201      	movs	r2, #1
 80010e8:	2120      	movs	r1, #32
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <nrf_read_reg+0x3c>)
 80010ec:	f000 fc90 	bl	8001a10 <HAL_GPIO_WritePin>
    return reg_val;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800

08001100 <nrf_write_buf>:

uint8_t nrf_write_buf(uint8_t reg, uint8_t *pbuf, uint8_t len) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
    uint8_t status, i;
    NRF_CS(0);                          /* SPI select nrf */
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <nrf_write_buf+0x5c>)
 8001116:	f000 fc7b 	bl	8001a10 <HAL_GPIO_WritePin>
    status = spi1_read_write_byte(reg); /* send register, and read status */
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fbe9 	bl	80008f4 <spi1_read_write_byte>
 8001122:	4603      	mov	r3, r0
 8001124:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < len; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e009      	b.n	8001140 <nrf_write_buf+0x40>
        spi1_read_write_byte(*pbuf++);  /* write data */
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	603a      	str	r2, [r7, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fbdd 	bl	80008f4 <spi1_read_write_byte>
    for (i = 0; i < len; i++) {
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3301      	adds	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3f1      	bcc.n	800112c <nrf_write_buf+0x2c>
    }
    
    NRF_CS(1);                          /* SPI cancel select nrf */
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <nrf_write_buf+0x5c>)
 800114e:	f000 fc5f 	bl	8001a10 <HAL_GPIO_WritePin>
    return status;                      /* return status */
 8001152:	7bbb      	ldrb	r3, [r7, #14]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020800 	.word	0x40020800

08001160 <nrf_read_buf>:

uint8_t nrf_read_buf(uint8_t reg, uint8_t *pbuf, uint8_t len) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
    uint8_t status, i;
    NRF_CS(0);                                  /* SPI select nrf */
 8001170:	2200      	movs	r2, #0
 8001172:	2120      	movs	r1, #32
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <nrf_read_buf+0x60>)
 8001176:	f000 fc4b 	bl	8001a10 <HAL_GPIO_WritePin>
    status = spi1_read_write_byte(reg);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fbb9 	bl	80008f4 <spi1_read_write_byte>
 8001182:	4603      	mov	r3, r0
 8001184:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < len; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e00a      	b.n	80011a2 <nrf_read_buf+0x42>
        pbuf[i] = spi1_read_write_byte(0XFF);   /* read data into pbuf */
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	18d4      	adds	r4, r2, r3
 8001192:	20ff      	movs	r0, #255	; 0xff
 8001194:	f7ff fbae 	bl	80008f4 <spi1_read_write_byte>
 8001198:	4603      	mov	r3, r0
 800119a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < len; i++) {
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	3301      	adds	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3f0      	bcc.n	800118c <nrf_read_buf+0x2c>
    }
    
    NRF_CS(1);                                  /* SPI cancel select nrf */
 80011aa:	2201      	movs	r2, #1
 80011ac:	2120      	movs	r1, #32
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <nrf_read_buf+0x60>)
 80011b0:	f000 fc2e 	bl	8001a10 <HAL_GPIO_WritePin>
    return status;                              /* return status */
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020800 	.word	0x40020800

080011c4 <nrf_rx_mode>:

void nrf_rx_mode(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    NRF_CE(0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2110      	movs	r1, #16
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <nrf_rx_mode+0x58>)
 80011ce:	f000 fc1f 	bl	8001a10 <HAL_GPIO_WritePin>
    nrf_write_buf(W_REGISTER + RX_ADDR_P0, (uint8_t *)RX_ADDR, 5);    /* RX address */
 80011d2:	2205      	movs	r2, #5
 80011d4:	4912      	ldr	r1, [pc, #72]	; (8001220 <nrf_rx_mode+0x5c>)
 80011d6:	202a      	movs	r0, #42	; 0x2a
 80011d8:	f7ff ff92 	bl	8001100 <nrf_write_buf>
    nrf_write_reg(W_REGISTER + CONFIG, 0x0f);       /* receive mode */
 80011dc:	210f      	movs	r1, #15
 80011de:	2020      	movs	r0, #32
 80011e0:	f7ff ff4a 	bl	8001078 <nrf_write_reg>
    nrf_write_reg(W_REGISTER + EN_AA, 0x01);        /* enable channel 0 auto answer */
 80011e4:	2101      	movs	r1, #1
 80011e6:	2021      	movs	r0, #33	; 0x21
 80011e8:	f7ff ff46 	bl	8001078 <nrf_write_reg>
    nrf_write_reg(W_REGISTER + RF_CH, 00);          /* RF freq 2.4Ghz */
 80011ec:	2100      	movs	r1, #0
 80011ee:	2025      	movs	r0, #37	; 0x25
 80011f0:	f7ff ff42 	bl	8001078 <nrf_write_reg>
    nrf_write_reg(W_REGISTER + RX_PW_P0, 32);       /* channel 0 rx data width */
 80011f4:	2120      	movs	r1, #32
 80011f6:	2031      	movs	r0, #49	; 0x31
 80011f8:	f7ff ff3e 	bl	8001078 <nrf_write_reg>
    nrf_write_reg(W_REGISTER + EN_RXADDR, 0x01);    /* enable channel 0 rx */
 80011fc:	2101      	movs	r1, #1
 80011fe:	2022      	movs	r0, #34	; 0x22
 8001200:	f7ff ff3a 	bl	8001078 <nrf_write_reg>
    nrf_write_reg(W_REGISTER + RF_SETUP, 0x0f);     /* 设置TX发射参数,0db增益,2Mbps */
 8001204:	210f      	movs	r1, #15
 8001206:	2026      	movs	r0, #38	; 0x26
 8001208:	f7ff ff36 	bl	8001078 <nrf_write_reg>
    NRF_CE(1);                                           /* CE为高,进入接收模式 */
 800120c:	2201      	movs	r2, #1
 800120e:	2110      	movs	r1, #16
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <nrf_rx_mode+0x58>)
 8001212:	f000 fbfd 	bl	8001a10 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800
 8001220:	20000004 	.word	0x20000004

08001224 <nrf_rx_packet>:
    nrf_write_reg(W_REGISTER + RF_CH, 00);          /* 设置RF通道为40 */
    nrf_write_reg(W_REGISTER + RF_SETUP, 0x0f);     /* 设置TX发射参数,0db增益,2Mbps */
    NRF_CE(1); /* CE为高,10us后启动发送 */
}

uint8_t nrf_rx_packet(uint8_t *pbuf) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    uint8_t sta;
    uint8_t rval = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
    
    sta = nrf_read_reg(R_REGISTER + STATUS); /* 读取状态寄存器的值 */
 8001230:	2007      	movs	r0, #7
 8001232:	f7ff ff45 	bl	80010c0 <nrf_read_reg>
 8001236:	4603      	mov	r3, r0
 8001238:	73bb      	strb	r3, [r7, #14]
    nrf_write_reg(W_REGISTER + STATUS, sta); /* 清除RX_OK中断标志 */
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	4619      	mov	r1, r3
 800123e:	2027      	movs	r0, #39	; 0x27
 8001240:	f7ff ff1a 	bl	8001078 <nrf_write_reg>

    if (sta & RX_OK)    /* 接收到数据 */
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <nrf_rx_packet+0x40>
    {
        nrf_read_buf(R_RX_PAYLOAD, pbuf, 32); /* 读取数据 */
 800124e:	2220      	movs	r2, #32
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2061      	movs	r0, #97	; 0x61
 8001254:	f7ff ff84 	bl	8001160 <nrf_read_buf>
        nrf_write_reg(FLUSH_RX, NOP); /* 清除RX FIFO寄存器 */
 8001258:	21ff      	movs	r1, #255	; 0xff
 800125a:	20e2      	movs	r0, #226	; 0xe2
 800125c:	f7ff ff0c 	bl	8001078 <nrf_write_reg>
        rval = 0;       /* 标记接收完成 */
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
    }

    return rval;    /* 返回结果 */
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <plc_change_mode>:
#include "plc.h"

void plc_change_mode(uint8_t mode) { // mode => 1: send; 0: receive
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  switch (mode)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <plc_change_mode+0x22>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10c      	bne.n	800129e <plc_change_mode+0x2e>
  {
  case 1:
    HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <plc_change_mode+0x38>)
 800128c:	f000 fbc0 	bl	8001a10 <HAL_GPIO_WritePin>
    break;
 8001290:	e006      	b.n	80012a0 <plc_change_mode+0x30>
  case 0:
    HAL_GPIO_WritePin(PLC_MODE_GPIO_Port, PLC_MODE_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <plc_change_mode+0x38>)
 800129a:	f000 fbb9 	bl	8001a10 <HAL_GPIO_WritePin>
  default:
    break;
 800129e:	bf00      	nop
  }
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020000 	.word	0x40020000

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f92b 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fb1e 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f943 	bl	800159a <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f90b 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000010 	.word	0x20000010
 800134c:	2000000c 	.word	0x2000000c

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000010 	.word	0x20000010
 8001374:	20000314 	.word	0x20000314

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000314 	.word	0x20000314

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff feda 	bl	8001378 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d008      	beq.n	80015e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e052      	b.n	800168a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0216 	bic.w	r2, r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_DMA_Abort+0x62>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0208 	bic.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e013      	b.n	800165e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fe9f 	bl	8001378 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d90c      	bls.n	800165e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e015      	b.n	800168a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e4      	bne.n	8001636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d004      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2205      	movs	r2, #5
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e16b      	b.n	80019cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 815a 	bne.w	80019c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d005      	beq.n	800172a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	2b02      	cmp	r3, #2
 8001728:	d130      	bne.n	800178c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d017      	beq.n	80017c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80b4 	beq.w	80019c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_GPIO_Init+0x30c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_GPIO_Init+0x30c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_GPIO_Init+0x30c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187a:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_GPIO_Init+0x310>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x314>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x226>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x318>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d025      	beq.n	80018fa <HAL_GPIO_Init+0x222>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_GPIO_Init+0x31c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <HAL_GPIO_Init+0x21e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_Init+0x320>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x21a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_GPIO_Init+0x324>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x216>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_GPIO_Init+0x328>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x212>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_GPIO_Init+0x32c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x20e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_GPIO_Init+0x330>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x20a>
 80018de:	2307      	movs	r3, #7
 80018e0:	e00e      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018e2:	2308      	movs	r3, #8
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x228>
 80018fe:	2300      	movs	r3, #0
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x310>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_GPIO_Init+0x334>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_GPIO_Init+0x334>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_GPIO_Init+0x334>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_GPIO_Init+0x334>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_GPIO_Init+0x334>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_GPIO_Init+0x334>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_GPIO_Init+0x334>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_GPIO_Init+0x334>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	f67f ae90 	bls.w	80016f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40021400 	.word	0x40021400
 8001a04:	40021800 	.word	0x40021800
 8001a08:	40021c00 	.word	0x40021c00
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	400b      	ands	r3, r1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e267      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d075      	beq.n	8001b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d00c      	beq.n	8001abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d112      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d05b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x108>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d157      	bne.n	8001b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e242      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x74>
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fc22 	bl	8001378 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fc1e 	bl	8001378 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e207      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xc0>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fc0e 	bl	8001378 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fc0a 	bl	8001378 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1f3      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0xe8>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c7      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff fbc3 	bl	8001378 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fbbf 	bl	8001378 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a8      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fba2 	bl	8001378 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fb9e 	bl	8001378 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e187      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff fb82 	bl	8001378 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fb7e 	bl	8001378 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e167      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x200>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb6b 	bl	8001378 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb67 	bl	8001378 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d907      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e150      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470000 	.word	0x42470000
 8001cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ea      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8097 	beq.w	8001e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b77      	ldr	r3, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b74      	ldr	r3, [pc, #464]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb27 	bl	8001378 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff fb23 	bl	8001378 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e10c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2ea>
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a63      	ldr	r2, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x30c>
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5b      	ldr	r2, [pc, #364]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fae8 	bl	8001378 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff fae4 	bl	8001378 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0cb      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ee      	beq.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fad2 	bl	8001378 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7ff face 	bl	8001378 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0b5      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a1 	beq.w	8001f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d05c      	beq.n	8001edc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d141      	bne.n	8001eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff faa2 	bl	8001378 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa9e 	bl	8001378 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e087      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fa77 	bl	8001378 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fa73 	bl	8001378 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e05c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x416>
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fa60 	bl	8001378 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fa5c 	bl	8001378 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e045      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e038      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d028      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d121      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d11a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f24:	4013      	ands	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0cc      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d90c      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	494d      	ldr	r1, [pc, #308]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d044      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d119      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e067      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4934      	ldr	r1, [pc, #208]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff f98e 	bl	8001378 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff f98a 	bl	8001378 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e04f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d20c      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	490a      	ldr	r1, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f8ee 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00
 8002124:	40023800 	.word	0x40023800
 8002128:	080043f4 	.word	0x080043f4
 800212c:	20000000 	.word	0x20000000
 8002130:	2000000c 	.word	0x2000000c

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b094      	sub	sp, #80	; 0x50
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
 8002140:	2300      	movs	r3, #0
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002144:	2300      	movs	r3, #0
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d00d      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x40>
 8002158:	2b08      	cmp	r3, #8
 800215a:	f200 80e1 	bhi.w	8002320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 8002162:	2b04      	cmp	r3, #4
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x3a>
 8002166:	e0db      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_GetSysClockFreq+0x204>)
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800216c:	e0db      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216e:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_RCC_GetSysClockFreq+0x208>)
 8002170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002172:	e0d8      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	2200      	movs	r2, #0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
 8002194:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
 80021a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021a6:	4622      	mov	r2, r4
 80021a8:	462b      	mov	r3, r5
 80021aa:	f04f 0000 	mov.w	r0, #0
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	0159      	lsls	r1, r3, #5
 80021b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b8:	0150      	lsls	r0, r2, #5
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4621      	mov	r1, r4
 80021c0:	1a51      	subs	r1, r2, r1
 80021c2:	6139      	str	r1, [r7, #16]
 80021c4:	4629      	mov	r1, r5
 80021c6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021d8:	4659      	mov	r1, fp
 80021da:	018b      	lsls	r3, r1, #6
 80021dc:	4651      	mov	r1, sl
 80021de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021e2:	4651      	mov	r1, sl
 80021e4:	018a      	lsls	r2, r1, #6
 80021e6:	4651      	mov	r1, sl
 80021e8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ec:	4659      	mov	r1, fp
 80021ee:	eb63 0901 	sbc.w	r9, r3, r1
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002206:	4690      	mov	r8, r2
 8002208:	4699      	mov	r9, r3
 800220a:	4623      	mov	r3, r4
 800220c:	eb18 0303 	adds.w	r3, r8, r3
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	462b      	mov	r3, r5
 8002214:	eb49 0303 	adc.w	r3, r9, r3
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002226:	4629      	mov	r1, r5
 8002228:	024b      	lsls	r3, r1, #9
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002230:	4621      	mov	r1, r4
 8002232:	024a      	lsls	r2, r1, #9
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	2200      	movs	r2, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
 800223e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002244:	f7fd ffc0 	bl	80001c8 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	e058      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	2200      	movs	r2, #0
 800225a:	4618      	mov	r0, r3
 800225c:	4611      	mov	r1, r2
 800225e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800226c:	4642      	mov	r2, r8
 800226e:	464b      	mov	r3, r9
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	0159      	lsls	r1, r3, #5
 800227a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227e:	0150      	lsls	r0, r2, #5
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4641      	mov	r1, r8
 8002286:	ebb2 0a01 	subs.w	sl, r2, r1
 800228a:	4649      	mov	r1, r9
 800228c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800229c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022a4:	ebb2 040a 	subs.w	r4, r2, sl
 80022a8:	eb63 050b 	sbc.w	r5, r3, fp
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	00eb      	lsls	r3, r5, #3
 80022b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	4643      	mov	r3, r8
 80022c2:	18e3      	adds	r3, r4, r3
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	464b      	mov	r3, r9
 80022c8:	eb45 0303 	adc.w	r3, r5, r3
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022da:	4629      	mov	r1, r5
 80022dc:	028b      	lsls	r3, r1, #10
 80022de:	4621      	mov	r1, r4
 80022e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022e4:	4621      	mov	r1, r4
 80022e6:	028a      	lsls	r2, r1, #10
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ee:	2200      	movs	r2, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	61fa      	str	r2, [r7, #28]
 80022f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f8:	f7fd ff66 	bl	80001c8 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4613      	mov	r3, r2
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800231e:	e002      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetSysClockFreq+0x204>)
 8002322:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002328:	4618      	mov	r0, r3
 800232a:	3750      	adds	r7, #80	; 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	08004404 	.word	0x08004404

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002384:	f7ff ffdc 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0b5b      	lsrs	r3, r3, #13
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08004404 	.word	0x08004404

080023a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07b      	b.n	80024b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ca:	d009      	beq.n	80023e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fa32 	bl	8000864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	f003 0104 	and.w	r1, r3, #4
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 0210 	and.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08c      	sub	sp, #48	; 0x30
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x26>
 80024dc:	2302      	movs	r3, #2
 80024de:	e18a      	b.n	80027f6 <HAL_SPI_TransmitReceive+0x33c>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e8:	f7fe ff46 	bl	8001378 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00f      	beq.n	800252a <HAL_SPI_TransmitReceive+0x70>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002510:	d107      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x68>
 800251a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800251e:	2b04      	cmp	r3, #4
 8002520:	d003      	beq.n	800252a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002528:	e15b      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_SPI_TransmitReceive+0x82>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_TransmitReceive+0x82>
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002542:	e14e      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b04      	cmp	r3, #4
 800254e:	d003      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	887a      	ldrh	r2, [r7, #2]
 800256e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d007      	beq.n	80025ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b4:	d178      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x10a>
 80025be:	8b7b      	ldrh	r3, [r7, #26]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d166      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	881a      	ldrh	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	1c9a      	adds	r2, r3, #2
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e8:	e053      	b.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d11b      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x176>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x176>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d113      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d119      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1b8>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d014      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	b292      	uxth	r2, r2
 8002654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	1c9a      	adds	r2, r3, #2
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800266e:	2301      	movs	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002672:	f7fe fe81 	bl	8001378 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267e:	429a      	cmp	r2, r3
 8002680:	d807      	bhi.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d003      	beq.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002690:	e0a7      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1a6      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x130>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1a1      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x130>
 80026a6:	e07c      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x1fc>
 80026b0:	8b7b      	ldrh	r3, [r7, #26]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d16b      	bne.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026dc:	e057      	b.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11c      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d017      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d114      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d119      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x2ae>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002768:	f7fe fe06 	bl	8001378 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002774:	429a      	cmp	r2, r3
 8002776:	d803      	bhi.n	8002780 <HAL_SPI_TransmitReceive+0x2c6>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d102      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2cc>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800278c:	e029      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1a2      	bne.n	80026de <HAL_SPI_TransmitReceive+0x224>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d19d      	bne.n	80026de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8b2 	bl	8002910 <SPI_EndRxTxTransaction>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027be:	e010      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	e000      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002810:	f7fe fdb2 	bl	8001378 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002820:	f7fe fdaa 	bl	8001378 <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	015b      	lsls	r3, r3, #5
 800282c:	0d1b      	lsrs	r3, r3, #20
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	e054      	b.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d050      	beq.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002840:	f7fe fd9a 	bl	8001378 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d902      	bls.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d13d      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d111      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002878:	d004      	beq.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d107      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d10f      	bne.n	80028be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e017      	b.n	8002902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3b01      	subs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d19b      	bne.n	8002838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <SPI_EndRxTxTransaction+0x7c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <SPI_EndRxTxTransaction+0x80>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0d5b      	lsrs	r3, r3, #21
 8002928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d112      	bne.n	8002962 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff5a 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e00f      	b.n	8002982 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d0f2      	beq.n	8002962 <SPI_EndRxTxTransaction+0x52>
 800297c:	e000      	b.n	8002980 <SPI_EndRxTxTransaction+0x70>
        break;
 800297e:	bf00      	nop
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000
 8002990:	165e9f81 	.word	0x165e9f81

08002994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e03f      	b.n	8002a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f938 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fddf 	bl	800359c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08a      	sub	sp, #40	; 0x28
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d17c      	bne.n	8002b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_UART_Transmit+0x2c>
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e075      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit+0x3e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e06e      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fc79 	bl	8001378 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e003      	b.n	8002ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac0:	e02a      	b.n	8002b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fb1f 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3302      	adds	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e007      	b.n	8002b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1cf      	bne.n	8002ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 faef 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e006      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d11d      	bne.n	8002ba8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_Receive_IT+0x26>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e016      	b.n	8002baa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Receive_IT+0x38>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e00f      	b.n	8002baa <HAL_UART_Receive_IT+0x58>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fb24 	bl	80031ec <UART_Start_Receive_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b0ba      	sub	sp, #232	; 0xe8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_UART_IRQHandler+0x66>
 8002c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fc07 	bl	8003426 <UART_Receive_IT>
      return;
 8002c18:	e256      	b.n	80030c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80de 	beq.w	8002de0 <HAL_UART_IRQHandler+0x22c>
 8002c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80d1 	beq.w	8002de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_UART_IRQHandler+0xae>
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_UART_IRQHandler+0xd2>
 8002c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_UART_IRQHandler+0xf6>
 8002c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d011      	beq.n	8002cda <HAL_UART_IRQHandler+0x126>
 8002cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0208 	orr.w	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 81ed 	beq.w	80030be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_UART_IRQHandler+0x14e>
 8002cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fb92 	bl	8003426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_UART_IRQHandler+0x17a>
 8002d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d04f      	beq.n	8002dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa9a 	bl	8003268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d141      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3314      	adds	r3, #20
 8002d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1d9      	bne.n	8002d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d013      	beq.n	8002dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	4a7d      	ldr	r2, [pc, #500]	; (8002f90 <HAL_UART_IRQHandler+0x3dc>)
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fc75 	bl	8001692 <HAL_DMA_Abort_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002db8:	4610      	mov	r0, r2
 8002dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	e00e      	b.n	8002ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f990 	bl	80030e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	e00a      	b.n	8002ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f98c 	bl	80030e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	e006      	b.n	8002ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f988 	bl	80030e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dda:	e170      	b.n	80030be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	bf00      	nop
    return;
 8002dde:	e16e      	b.n	80030be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 814a 	bne.w	800307e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8143 	beq.w	800307e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 813c 	beq.w	800307e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	f040 80b4 	bne.w	8002f94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8140 	beq.w	80030c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	f080 8139 	bcs.w	80030c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	f000 8088 	beq.w	8002f76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1d9      	bne.n	8002e66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e1      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e3      	bne.n	8002eee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	f023 0310 	bic.w	r3, r3, #16
 8002f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e3      	bne.n	8002f34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fb1e 	bl	80015b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8b6 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f8c:	e099      	b.n	80030c2 <HAL_UART_IRQHandler+0x50e>
 8002f8e:	bf00      	nop
 8002f90:	0800332f 	.word	0x0800332f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 808b 	beq.w	80030c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8086 	beq.w	80030c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fde:	647a      	str	r2, [r7, #68]	; 0x44
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	623b      	str	r3, [r7, #32]
   return(result);
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003016:	633a      	str	r2, [r7, #48]	; 0x30
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800301c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e3      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	60fb      	str	r3, [r7, #12]
   return(result);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0310 	bic.w	r3, r3, #16
 800304e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	69b9      	ldr	r1, [r7, #24]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	617b      	str	r3, [r7, #20]
   return(result);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e3      	bne.n	8003038 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f83e 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800307c:	e023      	b.n	80030c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_UART_IRQHandler+0x4ea>
 800308a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f95d 	bl	8003356 <UART_Transmit_IT>
    return;
 800309c:	e014      	b.n	80030c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00e      	beq.n	80030c8 <HAL_UART_IRQHandler+0x514>
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f99d 	bl	80033f6 <UART_EndTransmit_IT>
    return;
 80030bc:	e004      	b.n	80030c8 <HAL_UART_IRQHandler+0x514>
    return;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_UART_IRQHandler+0x514>
      return;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_UART_IRQHandler+0x514>
      return;
 80030c6:	bf00      	nop
  }
}
 80030c8:	37e8      	adds	r7, #232	; 0xe8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	e050      	b.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d04c      	beq.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
 8003130:	f7fe f922 	bl	8001378 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313c:	429a      	cmp	r2, r3
 800313e:	d241      	bcs.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003160:	637a      	str	r2, [r7, #52]	; 0x34
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	613b      	str	r3, [r7, #16]
   return(result);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003194:	623a      	str	r2, [r7, #32]
 8003196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003198:	69f9      	ldr	r1, [r7, #28]
 800319a:	6a3a      	ldr	r2, [r7, #32]
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e5      	bne.n	8003174 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e00f      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d09f      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	; 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2222      	movs	r2, #34	; 0x22
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003238:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0220 	orr.w	r2, r2, #32
 8003258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003268:	b480      	push	{r7}
 800326a:	b095      	sub	sp, #84	; 0x54
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003290:	643a      	str	r2, [r7, #64]	; 0x40
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e5      	bne.n	8003270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3314      	adds	r3, #20
 80032c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e5      	bne.n	80032a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d119      	bne.n	8003314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	647b      	str	r3, [r7, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003300:	61ba      	str	r2, [r7, #24]
 8003302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6979      	ldr	r1, [r7, #20]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003322:	bf00      	nop
 8003324:	3754      	adds	r7, #84	; 0x54
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fecb 	bl	80030e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b21      	cmp	r3, #33	; 0x21
 8003368:	d13e      	bne.n	80033e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	d114      	bne.n	800339e <UART_Transmit_IT+0x48>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d110      	bne.n	800339e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	1c9a      	adds	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]
 800339c:	e008      	b.n	80033b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6211      	str	r1, [r2, #32]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4619      	mov	r1, r3
 80033be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe5a 	bl	80030d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08c      	sub	sp, #48	; 0x30
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b22      	cmp	r3, #34	; 0x22
 8003438:	f040 80ab 	bne.w	8003592 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003444:	d117      	bne.n	8003476 <UART_Receive_IT+0x50>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	b29a      	uxth	r2, r3
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
 8003474:	e026      	b.n	80034c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d007      	beq.n	800349a <UART_Receive_IT+0x74>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <UART_Receive_IT+0x82>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e008      	b.n	80034ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4619      	mov	r1, r3
 80034d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d15a      	bne.n	800358e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0220 	bic.w	r2, r2, #32
 80034e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	2b01      	cmp	r3, #1
 8003516:	d135      	bne.n	8003584 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	613b      	str	r3, [r7, #16]
   return(result);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	623a      	str	r2, [r7, #32]
 8003540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	69f9      	ldr	r1, [r7, #28]
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	61bb      	str	r3, [r7, #24]
   return(result);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d10a      	bne.n	8003576 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fdbb 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
 8003582:	e002      	b.n	800358a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd fbe3 	bl	8000d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e002      	b.n	8003594 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3730      	adds	r7, #48	; 0x30
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b0c0      	sub	sp, #256	; 0x100
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	68d9      	ldr	r1, [r3, #12]
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	ea40 0301 	orr.w	r3, r0, r1
 80035c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035f4:	f021 010c 	bic.w	r1, r1, #12
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003602:	430b      	orrs	r3, r1
 8003604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	6999      	ldr	r1, [r3, #24]
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	ea40 0301 	orr.w	r3, r0, r1
 8003622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b8f      	ldr	r3, [pc, #572]	; (8003868 <UART_SetConfig+0x2cc>)
 800362c:	429a      	cmp	r2, r3
 800362e:	d005      	beq.n	800363c <UART_SetConfig+0xa0>
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b8d      	ldr	r3, [pc, #564]	; (800386c <UART_SetConfig+0x2d0>)
 8003638:	429a      	cmp	r2, r3
 800363a:	d104      	bne.n	8003646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7fe fea0 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003644:	e003      	b.n	800364e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003646:	f7fe fe87 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 800364a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	f040 810c 	bne.w	8003874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800365c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003660:	2200      	movs	r2, #0
 8003662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800366a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	1891      	adds	r1, r2, r2
 8003674:	65b9      	str	r1, [r7, #88]	; 0x58
 8003676:	415b      	adcs	r3, r3
 8003678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800367a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800367e:	4621      	mov	r1, r4
 8003680:	eb12 0801 	adds.w	r8, r2, r1
 8003684:	4629      	mov	r1, r5
 8003686:	eb43 0901 	adc.w	r9, r3, r1
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800369a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800369e:	4690      	mov	r8, r2
 80036a0:	4699      	mov	r9, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	eb18 0303 	adds.w	r3, r8, r3
 80036a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036ac:	462b      	mov	r3, r5
 80036ae:	eb49 0303 	adc.w	r3, r9, r3
 80036b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ca:	460b      	mov	r3, r1
 80036cc:	18db      	adds	r3, r3, r3
 80036ce:	653b      	str	r3, [r7, #80]	; 0x50
 80036d0:	4613      	mov	r3, r2
 80036d2:	eb42 0303 	adc.w	r3, r2, r3
 80036d6:	657b      	str	r3, [r7, #84]	; 0x54
 80036d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036e0:	f7fc fd72 	bl	80001c8 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4b61      	ldr	r3, [pc, #388]	; (8003870 <UART_SetConfig+0x2d4>)
 80036ea:	fba3 2302 	umull	r2, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	011c      	lsls	r4, r3, #4
 80036f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	1891      	adds	r1, r2, r2
 800370a:	64b9      	str	r1, [r7, #72]	; 0x48
 800370c:	415b      	adcs	r3, r3
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003714:	4641      	mov	r1, r8
 8003716:	eb12 0a01 	adds.w	sl, r2, r1
 800371a:	4649      	mov	r1, r9
 800371c:	eb43 0b01 	adc.w	fp, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800372c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003734:	4692      	mov	sl, r2
 8003736:	469b      	mov	fp, r3
 8003738:	4643      	mov	r3, r8
 800373a:	eb1a 0303 	adds.w	r3, sl, r3
 800373e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003742:	464b      	mov	r3, r9
 8003744:	eb4b 0303 	adc.w	r3, fp, r3
 8003748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800375c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003760:	460b      	mov	r3, r1
 8003762:	18db      	adds	r3, r3, r3
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
 8003766:	4613      	mov	r3, r2
 8003768:	eb42 0303 	adc.w	r3, r2, r3
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
 800376e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003776:	f7fc fd27 	bl	80001c8 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4611      	mov	r1, r2
 8003780:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <UART_SetConfig+0x2d4>)
 8003782:	fba3 2301 	umull	r2, r3, r3, r1
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2264      	movs	r2, #100	; 0x64
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	1acb      	subs	r3, r1, r3
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <UART_SetConfig+0x2d4>)
 8003798:	fba3 2302 	umull	r2, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037a4:	441c      	add	r4, r3
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c0:	415b      	adcs	r3, r3
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c8:	4641      	mov	r1, r8
 80037ca:	1851      	adds	r1, r2, r1
 80037cc:	6339      	str	r1, [r7, #48]	; 0x30
 80037ce:	4649      	mov	r1, r9
 80037d0:	414b      	adcs	r3, r1
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037e0:	4659      	mov	r1, fp
 80037e2:	00cb      	lsls	r3, r1, #3
 80037e4:	4651      	mov	r1, sl
 80037e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ea:	4651      	mov	r1, sl
 80037ec:	00ca      	lsls	r2, r1, #3
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	4642      	mov	r2, r8
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037fc:	464b      	mov	r3, r9
 80037fe:	460a      	mov	r2, r1
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800381c:	460b      	mov	r3, r1
 800381e:	18db      	adds	r3, r3, r3
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
 8003822:	4613      	mov	r3, r2
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003832:	f7fc fcc9 	bl	80001c8 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <UART_SetConfig+0x2d4>)
 800383c:	fba3 1302 	umull	r1, r3, r3, r2
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	2164      	movs	r1, #100	; 0x64
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	3332      	adds	r3, #50	; 0x32
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <UART_SetConfig+0x2d4>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	f003 0207 	and.w	r2, r3, #7
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4422      	add	r2, r4
 8003862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003864:	e106      	b.n	8003a74 <UART_SetConfig+0x4d8>
 8003866:	bf00      	nop
 8003868:	40011000 	.word	0x40011000
 800386c:	40011400 	.word	0x40011400
 8003870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800387e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003886:	4642      	mov	r2, r8
 8003888:	464b      	mov	r3, r9
 800388a:	1891      	adds	r1, r2, r2
 800388c:	6239      	str	r1, [r7, #32]
 800388e:	415b      	adcs	r3, r3
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003896:	4641      	mov	r1, r8
 8003898:	1854      	adds	r4, r2, r1
 800389a:	4649      	mov	r1, r9
 800389c:	eb43 0501 	adc.w	r5, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	00eb      	lsls	r3, r5, #3
 80038aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4643      	mov	r3, r8
 80038b6:	18e3      	adds	r3, r4, r3
 80038b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038bc:	464b      	mov	r3, r9
 80038be:	eb45 0303 	adc.w	r3, r5, r3
 80038c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038e2:	4629      	mov	r1, r5
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ec:	4621      	mov	r1, r4
 80038ee:	008a      	lsls	r2, r1, #2
 80038f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038f4:	f7fc fc68 	bl	80001c8 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <UART_SetConfig+0x4e4>)
 80038fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	011c      	lsls	r4, r3, #4
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	61b9      	str	r1, [r7, #24]
 8003920:	415b      	adcs	r3, r3
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6139      	str	r1, [r7, #16]
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800395c:	464b      	mov	r3, r9
 800395e:	460a      	mov	r2, r1
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	67bb      	str	r3, [r7, #120]	; 0x78
 8003972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003980:	4649      	mov	r1, r9
 8003982:	008b      	lsls	r3, r1, #2
 8003984:	4641      	mov	r1, r8
 8003986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398a:	4641      	mov	r1, r8
 800398c:	008a      	lsls	r2, r1, #2
 800398e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003992:	f7fc fc19 	bl	80001c8 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4611      	mov	r1, r2
 800399c:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <UART_SetConfig+0x4e4>)
 800399e:	fba3 2301 	umull	r2, r3, r3, r1
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2264      	movs	r2, #100	; 0x64
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	1acb      	subs	r3, r1, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a33      	ldr	r2, [pc, #204]	; (8003a80 <UART_SetConfig+0x4e4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039bc:	441c      	add	r4, r3
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	673b      	str	r3, [r7, #112]	; 0x70
 80039c6:	677a      	str	r2, [r7, #116]	; 0x74
 80039c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a0e:	464b      	mov	r3, r9
 8003a10:	460a      	mov	r2, r1
 8003a12:	eb42 0303 	adc.w	r3, r2, r3
 8003a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	663b      	str	r3, [r7, #96]	; 0x60
 8003a22:	667a      	str	r2, [r7, #100]	; 0x64
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a30:	4649      	mov	r1, r9
 8003a32:	008b      	lsls	r3, r1, #2
 8003a34:	4641      	mov	r1, r8
 8003a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	008a      	lsls	r2, r1, #2
 8003a3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a42:	f7fc fbc1 	bl	80001c8 <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <UART_SetConfig+0x4e4>)
 8003a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2164      	movs	r1, #100	; 0x64
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <UART_SetConfig+0x4e4>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4422      	add	r2, r4
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a80:	51eb851f 	.word	0x51eb851f

08003a84 <std>:
 8003a84:	2300      	movs	r3, #0
 8003a86:	b510      	push	{r4, lr}
 8003a88:	4604      	mov	r4, r0
 8003a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a92:	6083      	str	r3, [r0, #8]
 8003a94:	8181      	strh	r1, [r0, #12]
 8003a96:	6643      	str	r3, [r0, #100]	; 0x64
 8003a98:	81c2      	strh	r2, [r0, #14]
 8003a9a:	6183      	str	r3, [r0, #24]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	305c      	adds	r0, #92	; 0x5c
 8003aa2:	f000 f9d3 	bl	8003e4c <memset>
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x38>)
 8003aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <std+0x3c>)
 8003aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <std+0x40>)
 8003ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <std+0x44>)
 8003ab4:	6224      	str	r4, [r4, #32]
 8003ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	08003c9d 	.word	0x08003c9d
 8003ac0:	08003cbf 	.word	0x08003cbf
 8003ac4:	08003cf7 	.word	0x08003cf7
 8003ac8:	08003d1b 	.word	0x08003d1b

08003acc <stdio_exit_handler>:
 8003acc:	4a02      	ldr	r2, [pc, #8]	; (8003ad8 <stdio_exit_handler+0xc>)
 8003ace:	4903      	ldr	r1, [pc, #12]	; (8003adc <stdio_exit_handler+0x10>)
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <stdio_exit_handler+0x14>)
 8003ad2:	f000 b869 	b.w	8003ba8 <_fwalk_sglue>
 8003ad6:	bf00      	nop
 8003ad8:	20000014 	.word	0x20000014
 8003adc:	0800423d 	.word	0x0800423d
 8003ae0:	20000020 	.word	0x20000020

08003ae4 <cleanup_stdio>:
 8003ae4:	6841      	ldr	r1, [r0, #4]
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <cleanup_stdio+0x34>)
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
 8003aee:	d001      	beq.n	8003af4 <cleanup_stdio+0x10>
 8003af0:	f000 fba4 	bl	800423c <_fflush_r>
 8003af4:	68a1      	ldr	r1, [r4, #8]
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <cleanup_stdio+0x38>)
 8003af8:	4299      	cmp	r1, r3
 8003afa:	d002      	beq.n	8003b02 <cleanup_stdio+0x1e>
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 fb9d 	bl	800423c <_fflush_r>
 8003b02:	68e1      	ldr	r1, [r4, #12]
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <cleanup_stdio+0x3c>)
 8003b06:	4299      	cmp	r1, r3
 8003b08:	d004      	beq.n	8003b14 <cleanup_stdio+0x30>
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b10:	f000 bb94 	b.w	800423c <_fflush_r>
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	bf00      	nop
 8003b18:	20000318 	.word	0x20000318
 8003b1c:	20000380 	.word	0x20000380
 8003b20:	200003e8 	.word	0x200003e8

08003b24 <global_stdio_init.part.0>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <global_stdio_init.part.0+0x30>)
 8003b28:	4c0b      	ldr	r4, [pc, #44]	; (8003b58 <global_stdio_init.part.0+0x34>)
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <global_stdio_init.part.0+0x38>)
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	4620      	mov	r0, r4
 8003b30:	2200      	movs	r2, #0
 8003b32:	2104      	movs	r1, #4
 8003b34:	f7ff ffa6 	bl	8003a84 <std>
 8003b38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2109      	movs	r1, #9
 8003b40:	f7ff ffa0 	bl	8003a84 <std>
 8003b44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b48:	2202      	movs	r2, #2
 8003b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4e:	2112      	movs	r1, #18
 8003b50:	f7ff bf98 	b.w	8003a84 <std>
 8003b54:	20000450 	.word	0x20000450
 8003b58:	20000318 	.word	0x20000318
 8003b5c:	08003acd 	.word	0x08003acd

08003b60 <__sfp_lock_acquire>:
 8003b60:	4801      	ldr	r0, [pc, #4]	; (8003b68 <__sfp_lock_acquire+0x8>)
 8003b62:	f000 b9eb 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 8003b66:	bf00      	nop
 8003b68:	20000459 	.word	0x20000459

08003b6c <__sfp_lock_release>:
 8003b6c:	4801      	ldr	r0, [pc, #4]	; (8003b74 <__sfp_lock_release+0x8>)
 8003b6e:	f000 b9e6 	b.w	8003f3e <__retarget_lock_release_recursive>
 8003b72:	bf00      	nop
 8003b74:	20000459 	.word	0x20000459

08003b78 <__sinit>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	f7ff fff0 	bl	8003b60 <__sfp_lock_acquire>
 8003b80:	6a23      	ldr	r3, [r4, #32]
 8003b82:	b11b      	cbz	r3, 8003b8c <__sinit+0x14>
 8003b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b88:	f7ff bff0 	b.w	8003b6c <__sfp_lock_release>
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <__sinit+0x28>)
 8003b8e:	6223      	str	r3, [r4, #32]
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <__sinit+0x2c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f5      	bne.n	8003b84 <__sinit+0xc>
 8003b98:	f7ff ffc4 	bl	8003b24 <global_stdio_init.part.0>
 8003b9c:	e7f2      	b.n	8003b84 <__sinit+0xc>
 8003b9e:	bf00      	nop
 8003ba0:	08003ae5 	.word	0x08003ae5
 8003ba4:	20000450 	.word	0x20000450

08003ba8 <_fwalk_sglue>:
 8003ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bac:	4607      	mov	r7, r0
 8003bae:	4688      	mov	r8, r1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bbc:	d505      	bpl.n	8003bca <_fwalk_sglue+0x22>
 8003bbe:	6824      	ldr	r4, [r4, #0]
 8003bc0:	2c00      	cmp	r4, #0
 8003bc2:	d1f7      	bne.n	8003bb4 <_fwalk_sglue+0xc>
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d907      	bls.n	8003be0 <_fwalk_sglue+0x38>
 8003bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	d003      	beq.n	8003be0 <_fwalk_sglue+0x38>
 8003bd8:	4629      	mov	r1, r5
 8003bda:	4638      	mov	r0, r7
 8003bdc:	47c0      	blx	r8
 8003bde:	4306      	orrs	r6, r0
 8003be0:	3568      	adds	r5, #104	; 0x68
 8003be2:	e7e9      	b.n	8003bb8 <_fwalk_sglue+0x10>

08003be4 <_puts_r>:
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b570      	push	{r4, r5, r6, lr}
 8003be8:	6884      	ldr	r4, [r0, #8]
 8003bea:	4605      	mov	r5, r0
 8003bec:	460e      	mov	r6, r1
 8003bee:	b90b      	cbnz	r3, 8003bf4 <_puts_r+0x10>
 8003bf0:	f7ff ffc2 	bl	8003b78 <__sinit>
 8003bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bf6:	07db      	lsls	r3, r3, #31
 8003bf8:	d405      	bmi.n	8003c06 <_puts_r+0x22>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	0598      	lsls	r0, r3, #22
 8003bfe:	d402      	bmi.n	8003c06 <_puts_r+0x22>
 8003c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c02:	f000 f99b 	bl	8003f3c <__retarget_lock_acquire_recursive>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	0719      	lsls	r1, r3, #28
 8003c0a:	d513      	bpl.n	8003c34 <_puts_r+0x50>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	b18b      	cbz	r3, 8003c34 <_puts_r+0x50>
 8003c10:	3e01      	subs	r6, #1
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	b9e9      	cbnz	r1, 8003c5a <_puts_r+0x76>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da2e      	bge.n	8003c80 <_puts_r+0x9c>
 8003c22:	4622      	mov	r2, r4
 8003c24:	210a      	movs	r1, #10
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 f87b 	bl	8003d22 <__swbuf_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d007      	beq.n	8003c40 <_puts_r+0x5c>
 8003c30:	250a      	movs	r5, #10
 8003c32:	e007      	b.n	8003c44 <_puts_r+0x60>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 f8b0 	bl	8003d9c <__swsetup_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d0e7      	beq.n	8003c10 <_puts_r+0x2c>
 8003c40:	f04f 35ff 	mov.w	r5, #4294967295
 8003c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c46:	07da      	lsls	r2, r3, #31
 8003c48:	d405      	bmi.n	8003c56 <_puts_r+0x72>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	059b      	lsls	r3, r3, #22
 8003c4e:	d402      	bmi.n	8003c56 <_puts_r+0x72>
 8003c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c52:	f000 f974 	bl	8003f3e <__retarget_lock_release_recursive>
 8003c56:	4628      	mov	r0, r5
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da04      	bge.n	8003c68 <_puts_r+0x84>
 8003c5e:	69a2      	ldr	r2, [r4, #24]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dc06      	bgt.n	8003c72 <_puts_r+0x8e>
 8003c64:	290a      	cmp	r1, #10
 8003c66:	d004      	beq.n	8003c72 <_puts_r+0x8e>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	6022      	str	r2, [r4, #0]
 8003c6e:	7019      	strb	r1, [r3, #0]
 8003c70:	e7cf      	b.n	8003c12 <_puts_r+0x2e>
 8003c72:	4622      	mov	r2, r4
 8003c74:	4628      	mov	r0, r5
 8003c76:	f000 f854 	bl	8003d22 <__swbuf_r>
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	d1c9      	bne.n	8003c12 <_puts_r+0x2e>
 8003c7e:	e7df      	b.n	8003c40 <_puts_r+0x5c>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	250a      	movs	r5, #10
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	6022      	str	r2, [r4, #0]
 8003c88:	701d      	strb	r5, [r3, #0]
 8003c8a:	e7db      	b.n	8003c44 <_puts_r+0x60>

08003c8c <puts>:
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <puts+0xc>)
 8003c8e:	4601      	mov	r1, r0
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f7ff bfa7 	b.w	8003be4 <_puts_r>
 8003c96:	bf00      	nop
 8003c98:	2000006c 	.word	0x2000006c

08003c9c <__sread>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca4:	f000 f8fc 	bl	8003ea0 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bfab      	itete	ge
 8003cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cae:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb0:	181b      	addge	r3, r3, r0
 8003cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb6:	bfac      	ite	ge
 8003cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cba:	81a3      	strhlt	r3, [r4, #12]
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <__swrite>:
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	898b      	ldrh	r3, [r1, #12]
 8003cc6:	05db      	lsls	r3, r3, #23
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d505      	bpl.n	8003cdc <__swrite+0x1e>
 8003cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f000 f8d0 	bl	8003e7c <_lseek_r>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	4632      	mov	r2, r6
 8003cea:	463b      	mov	r3, r7
 8003cec:	4628      	mov	r0, r5
 8003cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	f000 b8e7 	b.w	8003ec4 <_write_r>

08003cf6 <__sseek>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 f8bd 	bl	8003e7c <_lseek_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	bf15      	itete	ne
 8003d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strheq	r3, [r4, #12]
 8003d14:	bf18      	it	ne
 8003d16:	81a3      	strhne	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__sclose>:
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 b89d 	b.w	8003e5c <_close_r>

08003d22 <__swbuf_r>:
 8003d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d24:	460e      	mov	r6, r1
 8003d26:	4614      	mov	r4, r2
 8003d28:	4605      	mov	r5, r0
 8003d2a:	b118      	cbz	r0, 8003d34 <__swbuf_r+0x12>
 8003d2c:	6a03      	ldr	r3, [r0, #32]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <__swbuf_r+0x12>
 8003d30:	f7ff ff22 	bl	8003b78 <__sinit>
 8003d34:	69a3      	ldr	r3, [r4, #24]
 8003d36:	60a3      	str	r3, [r4, #8]
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	071a      	lsls	r2, r3, #28
 8003d3c:	d525      	bpl.n	8003d8a <__swbuf_r+0x68>
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	b31b      	cbz	r3, 8003d8a <__swbuf_r+0x68>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	6922      	ldr	r2, [r4, #16]
 8003d46:	1a98      	subs	r0, r3, r2
 8003d48:	6963      	ldr	r3, [r4, #20]
 8003d4a:	b2f6      	uxtb	r6, r6
 8003d4c:	4283      	cmp	r3, r0
 8003d4e:	4637      	mov	r7, r6
 8003d50:	dc04      	bgt.n	8003d5c <__swbuf_r+0x3a>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 fa71 	bl	800423c <_fflush_r>
 8003d5a:	b9e0      	cbnz	r0, 8003d96 <__swbuf_r+0x74>
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60a3      	str	r3, [r4, #8]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	701e      	strb	r6, [r3, #0]
 8003d6a:	6962      	ldr	r2, [r4, #20]
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d004      	beq.n	8003d7c <__swbuf_r+0x5a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	07db      	lsls	r3, r3, #31
 8003d76:	d506      	bpl.n	8003d86 <__swbuf_r+0x64>
 8003d78:	2e0a      	cmp	r6, #10
 8003d7a:	d104      	bne.n	8003d86 <__swbuf_r+0x64>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fa5c 	bl	800423c <_fflush_r>
 8003d84:	b938      	cbnz	r0, 8003d96 <__swbuf_r+0x74>
 8003d86:	4638      	mov	r0, r7
 8003d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f805 	bl	8003d9c <__swsetup_r>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d0d5      	beq.n	8003d42 <__swbuf_r+0x20>
 8003d96:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9a:	e7f4      	b.n	8003d86 <__swbuf_r+0x64>

08003d9c <__swsetup_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <__swsetup_r+0xac>)
 8003da0:	4605      	mov	r5, r0
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	460c      	mov	r4, r1
 8003da6:	b118      	cbz	r0, 8003db0 <__swsetup_r+0x14>
 8003da8:	6a03      	ldr	r3, [r0, #32]
 8003daa:	b90b      	cbnz	r3, 8003db0 <__swsetup_r+0x14>
 8003dac:	f7ff fee4 	bl	8003b78 <__sinit>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db6:	0718      	lsls	r0, r3, #28
 8003db8:	d422      	bmi.n	8003e00 <__swsetup_r+0x64>
 8003dba:	06d9      	lsls	r1, r3, #27
 8003dbc:	d407      	bmi.n	8003dce <__swsetup_r+0x32>
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e034      	b.n	8003e38 <__swsetup_r+0x9c>
 8003dce:	0758      	lsls	r0, r3, #29
 8003dd0:	d512      	bpl.n	8003df8 <__swsetup_r+0x5c>
 8003dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd4:	b141      	cbz	r1, 8003de8 <__swsetup_r+0x4c>
 8003dd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	d002      	beq.n	8003de4 <__swsetup_r+0x48>
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f8ae 	bl	8003f40 <_free_r>
 8003de4:	2300      	movs	r3, #0
 8003de6:	6363      	str	r3, [r4, #52]	; 0x34
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	2300      	movs	r3, #0
 8003df2:	6063      	str	r3, [r4, #4]
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	b94b      	cbnz	r3, 8003e18 <__swsetup_r+0x7c>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0e:	d003      	beq.n	8003e18 <__swsetup_r+0x7c>
 8003e10:	4621      	mov	r1, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fa60 	bl	80042d8 <__smakebuf_r>
 8003e18:	89a0      	ldrh	r0, [r4, #12]
 8003e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e1e:	f010 0301 	ands.w	r3, r0, #1
 8003e22:	d00a      	beq.n	8003e3a <__swsetup_r+0x9e>
 8003e24:	2300      	movs	r3, #0
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6963      	ldr	r3, [r4, #20]
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	61a3      	str	r3, [r4, #24]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	b943      	cbnz	r3, 8003e44 <__swsetup_r+0xa8>
 8003e32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e36:	d1c4      	bne.n	8003dc2 <__swsetup_r+0x26>
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
 8003e3a:	0781      	lsls	r1, r0, #30
 8003e3c:	bf58      	it	pl
 8003e3e:	6963      	ldrpl	r3, [r4, #20]
 8003e40:	60a3      	str	r3, [r4, #8]
 8003e42:	e7f4      	b.n	8003e2e <__swsetup_r+0x92>
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7f7      	b.n	8003e38 <__swsetup_r+0x9c>
 8003e48:	2000006c 	.word	0x2000006c

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc fdf9 	bl	8000a5e <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20000454 	.word	0x20000454

08003e7c <_lseek_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	; (8003e9c <_lseek_r+0x20>)
 8003e80:	4604      	mov	r4, r0
 8003e82:	4608      	mov	r0, r1
 8003e84:	4611      	mov	r1, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	602a      	str	r2, [r5, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fc fe0e 	bl	8000aac <_lseek>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_lseek_r+0x1e>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_lseek_r+0x1e>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	20000454 	.word	0x20000454

08003ea0 <_read_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	; (8003ec0 <_read_r+0x20>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fc fd9c 	bl	80009ec <_read>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_read_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_read_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	20000454 	.word	0x20000454

08003ec4 <_write_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d07      	ldr	r5, [pc, #28]	; (8003ee4 <_write_r+0x20>)
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fc fda7 	bl	8000a26 <_write>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_write_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_write_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000454 	.word	0x20000454

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000006c 	.word	0x2000006c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 fa54 	bl	80043b4 <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08004414 	.word	0x08004414
 8003f30:	08004414 	.word	0x08004414
 8003f34:	08004414 	.word	0x08004414
 8003f38:	08004418 	.word	0x08004418

08003f3c <__retarget_lock_acquire_recursive>:
 8003f3c:	4770      	bx	lr

08003f3e <__retarget_lock_release_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <_free_r>:
 8003f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f42:	2900      	cmp	r1, #0
 8003f44:	d044      	beq.n	8003fd0 <_free_r+0x90>
 8003f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f4a:	9001      	str	r0, [sp, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f52:	bfb8      	it	lt
 8003f54:	18e4      	addlt	r4, r4, r3
 8003f56:	f000 f8df 	bl	8004118 <__malloc_lock>
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <_free_r+0x94>)
 8003f5c:	9801      	ldr	r0, [sp, #4]
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	b933      	cbnz	r3, 8003f70 <_free_r+0x30>
 8003f62:	6063      	str	r3, [r4, #4]
 8003f64:	6014      	str	r4, [r2, #0]
 8003f66:	b003      	add	sp, #12
 8003f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f6c:	f000 b8da 	b.w	8004124 <__malloc_unlock>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d908      	bls.n	8003f86 <_free_r+0x46>
 8003f74:	6825      	ldr	r5, [r4, #0]
 8003f76:	1961      	adds	r1, r4, r5
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	bf01      	itttt	eq
 8003f7c:	6819      	ldreq	r1, [r3, #0]
 8003f7e:	685b      	ldreq	r3, [r3, #4]
 8003f80:	1949      	addeq	r1, r1, r5
 8003f82:	6021      	streq	r1, [r4, #0]
 8003f84:	e7ed      	b.n	8003f62 <_free_r+0x22>
 8003f86:	461a      	mov	r2, r3
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	b10b      	cbz	r3, 8003f90 <_free_r+0x50>
 8003f8c:	42a3      	cmp	r3, r4
 8003f8e:	d9fa      	bls.n	8003f86 <_free_r+0x46>
 8003f90:	6811      	ldr	r1, [r2, #0]
 8003f92:	1855      	adds	r5, r2, r1
 8003f94:	42a5      	cmp	r5, r4
 8003f96:	d10b      	bne.n	8003fb0 <_free_r+0x70>
 8003f98:	6824      	ldr	r4, [r4, #0]
 8003f9a:	4421      	add	r1, r4
 8003f9c:	1854      	adds	r4, r2, r1
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	d1e0      	bne.n	8003f66 <_free_r+0x26>
 8003fa4:	681c      	ldr	r4, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	6053      	str	r3, [r2, #4]
 8003faa:	440c      	add	r4, r1
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	e7da      	b.n	8003f66 <_free_r+0x26>
 8003fb0:	d902      	bls.n	8003fb8 <_free_r+0x78>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	6003      	str	r3, [r0, #0]
 8003fb6:	e7d6      	b.n	8003f66 <_free_r+0x26>
 8003fb8:	6825      	ldr	r5, [r4, #0]
 8003fba:	1961      	adds	r1, r4, r5
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	bf04      	itt	eq
 8003fc0:	6819      	ldreq	r1, [r3, #0]
 8003fc2:	685b      	ldreq	r3, [r3, #4]
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	bf04      	itt	eq
 8003fc8:	1949      	addeq	r1, r1, r5
 8003fca:	6021      	streq	r1, [r4, #0]
 8003fcc:	6054      	str	r4, [r2, #4]
 8003fce:	e7ca      	b.n	8003f66 <_free_r+0x26>
 8003fd0:	b003      	add	sp, #12
 8003fd2:	bd30      	pop	{r4, r5, pc}
 8003fd4:	2000045c 	.word	0x2000045c

08003fd8 <sbrk_aligned>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4e0e      	ldr	r6, [pc, #56]	; (8004014 <sbrk_aligned+0x3c>)
 8003fdc:	460c      	mov	r4, r1
 8003fde:	6831      	ldr	r1, [r6, #0]
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	b911      	cbnz	r1, 8003fea <sbrk_aligned+0x12>
 8003fe4:	f000 f9d6 	bl	8004394 <_sbrk_r>
 8003fe8:	6030      	str	r0, [r6, #0]
 8003fea:	4621      	mov	r1, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 f9d1 	bl	8004394 <_sbrk_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d00a      	beq.n	800400c <sbrk_aligned+0x34>
 8003ff6:	1cc4      	adds	r4, r0, #3
 8003ff8:	f024 0403 	bic.w	r4, r4, #3
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d007      	beq.n	8004010 <sbrk_aligned+0x38>
 8004000:	1a21      	subs	r1, r4, r0
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f9c6 	bl	8004394 <_sbrk_r>
 8004008:	3001      	adds	r0, #1
 800400a:	d101      	bne.n	8004010 <sbrk_aligned+0x38>
 800400c:	f04f 34ff 	mov.w	r4, #4294967295
 8004010:	4620      	mov	r0, r4
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	20000460 	.word	0x20000460

08004018 <_malloc_r>:
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800401c:	1ccd      	adds	r5, r1, #3
 800401e:	f025 0503 	bic.w	r5, r5, #3
 8004022:	3508      	adds	r5, #8
 8004024:	2d0c      	cmp	r5, #12
 8004026:	bf38      	it	cc
 8004028:	250c      	movcc	r5, #12
 800402a:	2d00      	cmp	r5, #0
 800402c:	4607      	mov	r7, r0
 800402e:	db01      	blt.n	8004034 <_malloc_r+0x1c>
 8004030:	42a9      	cmp	r1, r5
 8004032:	d905      	bls.n	8004040 <_malloc_r+0x28>
 8004034:	230c      	movs	r3, #12
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	2600      	movs	r6, #0
 800403a:	4630      	mov	r0, r6
 800403c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004114 <_malloc_r+0xfc>
 8004044:	f000 f868 	bl	8004118 <__malloc_lock>
 8004048:	f8d8 3000 	ldr.w	r3, [r8]
 800404c:	461c      	mov	r4, r3
 800404e:	bb5c      	cbnz	r4, 80040a8 <_malloc_r+0x90>
 8004050:	4629      	mov	r1, r5
 8004052:	4638      	mov	r0, r7
 8004054:	f7ff ffc0 	bl	8003fd8 <sbrk_aligned>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	4604      	mov	r4, r0
 800405c:	d155      	bne.n	800410a <_malloc_r+0xf2>
 800405e:	f8d8 4000 	ldr.w	r4, [r8]
 8004062:	4626      	mov	r6, r4
 8004064:	2e00      	cmp	r6, #0
 8004066:	d145      	bne.n	80040f4 <_malloc_r+0xdc>
 8004068:	2c00      	cmp	r4, #0
 800406a:	d048      	beq.n	80040fe <_malloc_r+0xe6>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	4631      	mov	r1, r6
 8004070:	4638      	mov	r0, r7
 8004072:	eb04 0903 	add.w	r9, r4, r3
 8004076:	f000 f98d 	bl	8004394 <_sbrk_r>
 800407a:	4581      	cmp	r9, r0
 800407c:	d13f      	bne.n	80040fe <_malloc_r+0xe6>
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	1a6d      	subs	r5, r5, r1
 8004082:	4629      	mov	r1, r5
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff ffa7 	bl	8003fd8 <sbrk_aligned>
 800408a:	3001      	adds	r0, #1
 800408c:	d037      	beq.n	80040fe <_malloc_r+0xe6>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	442b      	add	r3, r5
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	f8d8 3000 	ldr.w	r3, [r8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d038      	beq.n	800410e <_malloc_r+0xf6>
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	42a2      	cmp	r2, r4
 80040a0:	d12b      	bne.n	80040fa <_malloc_r+0xe2>
 80040a2:	2200      	movs	r2, #0
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e00f      	b.n	80040c8 <_malloc_r+0xb0>
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	1b52      	subs	r2, r2, r5
 80040ac:	d41f      	bmi.n	80040ee <_malloc_r+0xd6>
 80040ae:	2a0b      	cmp	r2, #11
 80040b0:	d917      	bls.n	80040e2 <_malloc_r+0xca>
 80040b2:	1961      	adds	r1, r4, r5
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	6025      	str	r5, [r4, #0]
 80040b8:	bf18      	it	ne
 80040ba:	6059      	strne	r1, [r3, #4]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	bf08      	it	eq
 80040c0:	f8c8 1000 	streq.w	r1, [r8]
 80040c4:	5162      	str	r2, [r4, r5]
 80040c6:	604b      	str	r3, [r1, #4]
 80040c8:	4638      	mov	r0, r7
 80040ca:	f104 060b 	add.w	r6, r4, #11
 80040ce:	f000 f829 	bl	8004124 <__malloc_unlock>
 80040d2:	f026 0607 	bic.w	r6, r6, #7
 80040d6:	1d23      	adds	r3, r4, #4
 80040d8:	1af2      	subs	r2, r6, r3
 80040da:	d0ae      	beq.n	800403a <_malloc_r+0x22>
 80040dc:	1b9b      	subs	r3, r3, r6
 80040de:	50a3      	str	r3, [r4, r2]
 80040e0:	e7ab      	b.n	800403a <_malloc_r+0x22>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	6862      	ldr	r2, [r4, #4]
 80040e6:	d1dd      	bne.n	80040a4 <_malloc_r+0x8c>
 80040e8:	f8c8 2000 	str.w	r2, [r8]
 80040ec:	e7ec      	b.n	80040c8 <_malloc_r+0xb0>
 80040ee:	4623      	mov	r3, r4
 80040f0:	6864      	ldr	r4, [r4, #4]
 80040f2:	e7ac      	b.n	800404e <_malloc_r+0x36>
 80040f4:	4634      	mov	r4, r6
 80040f6:	6876      	ldr	r6, [r6, #4]
 80040f8:	e7b4      	b.n	8004064 <_malloc_r+0x4c>
 80040fa:	4613      	mov	r3, r2
 80040fc:	e7cc      	b.n	8004098 <_malloc_r+0x80>
 80040fe:	230c      	movs	r3, #12
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4638      	mov	r0, r7
 8004104:	f000 f80e 	bl	8004124 <__malloc_unlock>
 8004108:	e797      	b.n	800403a <_malloc_r+0x22>
 800410a:	6025      	str	r5, [r4, #0]
 800410c:	e7dc      	b.n	80040c8 <_malloc_r+0xb0>
 800410e:	605b      	str	r3, [r3, #4]
 8004110:	deff      	udf	#255	; 0xff
 8004112:	bf00      	nop
 8004114:	2000045c 	.word	0x2000045c

08004118 <__malloc_lock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_lock+0x8>)
 800411a:	f7ff bf0f 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 800411e:	bf00      	nop
 8004120:	20000458 	.word	0x20000458

08004124 <__malloc_unlock>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__malloc_unlock+0x8>)
 8004126:	f7ff bf0a 	b.w	8003f3e <__retarget_lock_release_recursive>
 800412a:	bf00      	nop
 800412c:	20000458 	.word	0x20000458

08004130 <__sflush_r>:
 8004130:	898a      	ldrh	r2, [r1, #12]
 8004132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	4605      	mov	r5, r0
 8004138:	0710      	lsls	r0, r2, #28
 800413a:	460c      	mov	r4, r1
 800413c:	d458      	bmi.n	80041f0 <__sflush_r+0xc0>
 800413e:	684b      	ldr	r3, [r1, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	dc05      	bgt.n	8004150 <__sflush_r+0x20>
 8004144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	dc02      	bgt.n	8004150 <__sflush_r+0x20>
 800414a:	2000      	movs	r0, #0
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004152:	2e00      	cmp	r6, #0
 8004154:	d0f9      	beq.n	800414a <__sflush_r+0x1a>
 8004156:	2300      	movs	r3, #0
 8004158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800415c:	682f      	ldr	r7, [r5, #0]
 800415e:	6a21      	ldr	r1, [r4, #32]
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	d032      	beq.n	80041ca <__sflush_r+0x9a>
 8004164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	075a      	lsls	r2, r3, #29
 800416a:	d505      	bpl.n	8004178 <__sflush_r+0x48>
 800416c:	6863      	ldr	r3, [r4, #4]
 800416e:	1ac0      	subs	r0, r0, r3
 8004170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004172:	b10b      	cbz	r3, 8004178 <__sflush_r+0x48>
 8004174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004176:	1ac0      	subs	r0, r0, r3
 8004178:	2300      	movs	r3, #0
 800417a:	4602      	mov	r2, r0
 800417c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800417e:	6a21      	ldr	r1, [r4, #32]
 8004180:	4628      	mov	r0, r5
 8004182:	47b0      	blx	r6
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	d106      	bne.n	8004198 <__sflush_r+0x68>
 800418a:	6829      	ldr	r1, [r5, #0]
 800418c:	291d      	cmp	r1, #29
 800418e:	d82b      	bhi.n	80041e8 <__sflush_r+0xb8>
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <__sflush_r+0x108>)
 8004192:	410a      	asrs	r2, r1
 8004194:	07d6      	lsls	r6, r2, #31
 8004196:	d427      	bmi.n	80041e8 <__sflush_r+0xb8>
 8004198:	2200      	movs	r2, #0
 800419a:	6062      	str	r2, [r4, #4]
 800419c:	04d9      	lsls	r1, r3, #19
 800419e:	6922      	ldr	r2, [r4, #16]
 80041a0:	6022      	str	r2, [r4, #0]
 80041a2:	d504      	bpl.n	80041ae <__sflush_r+0x7e>
 80041a4:	1c42      	adds	r2, r0, #1
 80041a6:	d101      	bne.n	80041ac <__sflush_r+0x7c>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b903      	cbnz	r3, 80041ae <__sflush_r+0x7e>
 80041ac:	6560      	str	r0, [r4, #84]	; 0x54
 80041ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b0:	602f      	str	r7, [r5, #0]
 80041b2:	2900      	cmp	r1, #0
 80041b4:	d0c9      	beq.n	800414a <__sflush_r+0x1a>
 80041b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ba:	4299      	cmp	r1, r3
 80041bc:	d002      	beq.n	80041c4 <__sflush_r+0x94>
 80041be:	4628      	mov	r0, r5
 80041c0:	f7ff febe 	bl	8003f40 <_free_r>
 80041c4:	2000      	movs	r0, #0
 80041c6:	6360      	str	r0, [r4, #52]	; 0x34
 80041c8:	e7c0      	b.n	800414c <__sflush_r+0x1c>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b0      	blx	r6
 80041d0:	1c41      	adds	r1, r0, #1
 80041d2:	d1c8      	bne.n	8004166 <__sflush_r+0x36>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0c5      	beq.n	8004166 <__sflush_r+0x36>
 80041da:	2b1d      	cmp	r3, #29
 80041dc:	d001      	beq.n	80041e2 <__sflush_r+0xb2>
 80041de:	2b16      	cmp	r3, #22
 80041e0:	d101      	bne.n	80041e6 <__sflush_r+0xb6>
 80041e2:	602f      	str	r7, [r5, #0]
 80041e4:	e7b1      	b.n	800414a <__sflush_r+0x1a>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	e7ad      	b.n	800414c <__sflush_r+0x1c>
 80041f0:	690f      	ldr	r7, [r1, #16]
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	d0a9      	beq.n	800414a <__sflush_r+0x1a>
 80041f6:	0793      	lsls	r3, r2, #30
 80041f8:	680e      	ldr	r6, [r1, #0]
 80041fa:	bf08      	it	eq
 80041fc:	694b      	ldreq	r3, [r1, #20]
 80041fe:	600f      	str	r7, [r1, #0]
 8004200:	bf18      	it	ne
 8004202:	2300      	movne	r3, #0
 8004204:	eba6 0807 	sub.w	r8, r6, r7
 8004208:	608b      	str	r3, [r1, #8]
 800420a:	f1b8 0f00 	cmp.w	r8, #0
 800420e:	dd9c      	ble.n	800414a <__sflush_r+0x1a>
 8004210:	6a21      	ldr	r1, [r4, #32]
 8004212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004214:	4643      	mov	r3, r8
 8004216:	463a      	mov	r2, r7
 8004218:	4628      	mov	r0, r5
 800421a:	47b0      	blx	r6
 800421c:	2800      	cmp	r0, #0
 800421e:	dc06      	bgt.n	800422e <__sflush_r+0xfe>
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	e78e      	b.n	800414c <__sflush_r+0x1c>
 800422e:	4407      	add	r7, r0
 8004230:	eba8 0800 	sub.w	r8, r8, r0
 8004234:	e7e9      	b.n	800420a <__sflush_r+0xda>
 8004236:	bf00      	nop
 8004238:	dfbffffe 	.word	0xdfbffffe

0800423c <_fflush_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	690b      	ldr	r3, [r1, #16]
 8004240:	4605      	mov	r5, r0
 8004242:	460c      	mov	r4, r1
 8004244:	b913      	cbnz	r3, 800424c <_fflush_r+0x10>
 8004246:	2500      	movs	r5, #0
 8004248:	4628      	mov	r0, r5
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	b118      	cbz	r0, 8004256 <_fflush_r+0x1a>
 800424e:	6a03      	ldr	r3, [r0, #32]
 8004250:	b90b      	cbnz	r3, 8004256 <_fflush_r+0x1a>
 8004252:	f7ff fc91 	bl	8003b78 <__sinit>
 8004256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f3      	beq.n	8004246 <_fflush_r+0xa>
 800425e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004260:	07d0      	lsls	r0, r2, #31
 8004262:	d404      	bmi.n	800426e <_fflush_r+0x32>
 8004264:	0599      	lsls	r1, r3, #22
 8004266:	d402      	bmi.n	800426e <_fflush_r+0x32>
 8004268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800426a:	f7ff fe67 	bl	8003f3c <__retarget_lock_acquire_recursive>
 800426e:	4628      	mov	r0, r5
 8004270:	4621      	mov	r1, r4
 8004272:	f7ff ff5d 	bl	8004130 <__sflush_r>
 8004276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004278:	07da      	lsls	r2, r3, #31
 800427a:	4605      	mov	r5, r0
 800427c:	d4e4      	bmi.n	8004248 <_fflush_r+0xc>
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	059b      	lsls	r3, r3, #22
 8004282:	d4e1      	bmi.n	8004248 <_fflush_r+0xc>
 8004284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004286:	f7ff fe5a 	bl	8003f3e <__retarget_lock_release_recursive>
 800428a:	e7dd      	b.n	8004248 <_fflush_r+0xc>

0800428c <__swhatbuf_r>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	460c      	mov	r4, r1
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	2900      	cmp	r1, #0
 8004296:	b096      	sub	sp, #88	; 0x58
 8004298:	4615      	mov	r5, r2
 800429a:	461e      	mov	r6, r3
 800429c:	da0d      	bge.n	80042ba <__swhatbuf_r+0x2e>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	bf0c      	ite	eq
 80042aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042ae:	2340      	movne	r3, #64	; 0x40
 80042b0:	2000      	movs	r0, #0
 80042b2:	6031      	str	r1, [r6, #0]
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	b016      	add	sp, #88	; 0x58
 80042b8:	bd70      	pop	{r4, r5, r6, pc}
 80042ba:	466a      	mov	r2, sp
 80042bc:	f000 f848 	bl	8004350 <_fstat_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	dbec      	blt.n	800429e <__swhatbuf_r+0x12>
 80042c4:	9901      	ldr	r1, [sp, #4]
 80042c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042ce:	4259      	negs	r1, r3
 80042d0:	4159      	adcs	r1, r3
 80042d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d6:	e7eb      	b.n	80042b0 <__swhatbuf_r+0x24>

080042d8 <__smakebuf_r>:
 80042d8:	898b      	ldrh	r3, [r1, #12]
 80042da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042dc:	079d      	lsls	r5, r3, #30
 80042de:	4606      	mov	r6, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	d507      	bpl.n	80042f4 <__smakebuf_r+0x1c>
 80042e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	6123      	str	r3, [r4, #16]
 80042ec:	2301      	movs	r3, #1
 80042ee:	6163      	str	r3, [r4, #20]
 80042f0:	b002      	add	sp, #8
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	ab01      	add	r3, sp, #4
 80042f6:	466a      	mov	r2, sp
 80042f8:	f7ff ffc8 	bl	800428c <__swhatbuf_r>
 80042fc:	9900      	ldr	r1, [sp, #0]
 80042fe:	4605      	mov	r5, r0
 8004300:	4630      	mov	r0, r6
 8004302:	f7ff fe89 	bl	8004018 <_malloc_r>
 8004306:	b948      	cbnz	r0, 800431c <__smakebuf_r+0x44>
 8004308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800430c:	059a      	lsls	r2, r3, #22
 800430e:	d4ef      	bmi.n	80042f0 <__smakebuf_r+0x18>
 8004310:	f023 0303 	bic.w	r3, r3, #3
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	e7e3      	b.n	80042e4 <__smakebuf_r+0xc>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	6020      	str	r0, [r4, #0]
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	6163      	str	r3, [r4, #20]
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	6120      	str	r0, [r4, #16]
 800432e:	b15b      	cbz	r3, 8004348 <__smakebuf_r+0x70>
 8004330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f81d 	bl	8004374 <_isatty_r>
 800433a:	b128      	cbz	r0, 8004348 <__smakebuf_r+0x70>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	431d      	orrs	r5, r3
 800434c:	81a5      	strh	r5, [r4, #12]
 800434e:	e7cf      	b.n	80042f0 <__smakebuf_r+0x18>

08004350 <_fstat_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d07      	ldr	r5, [pc, #28]	; (8004370 <_fstat_r+0x20>)
 8004354:	2300      	movs	r3, #0
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	f7fc fb8a 	bl	8000a76 <_fstat>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	d102      	bne.n	800436c <_fstat_r+0x1c>
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	b103      	cbz	r3, 800436c <_fstat_r+0x1c>
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	bd38      	pop	{r3, r4, r5, pc}
 800436e:	bf00      	nop
 8004370:	20000454 	.word	0x20000454

08004374 <_isatty_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4d06      	ldr	r5, [pc, #24]	; (8004390 <_isatty_r+0x1c>)
 8004378:	2300      	movs	r3, #0
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fc fb89 	bl	8000a96 <_isatty>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_isatty_r+0x1a>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_isatty_r+0x1a>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000454 	.word	0x20000454

08004394 <_sbrk_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	; (80043b0 <_sbrk_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fb92 	bl	8000ac8 <_sbrk>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_sbrk_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_sbrk_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000454 	.word	0x20000454

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
